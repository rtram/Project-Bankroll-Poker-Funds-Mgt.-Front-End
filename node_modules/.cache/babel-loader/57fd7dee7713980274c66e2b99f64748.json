{"ast":null,"code":"// const URL = 'http://localhost:3001/api/v1'\nvar URL = 'https://project-bankroll-backend.herokuapp.com/api/v1';\n\nvar loggedIn = function loggedIn(data) {\n  localStorage.setItem('token', data.jwt);\n  localStorage.setItem('currentUser', data.user);\n  return {\n    type: \"LOGGED_IN\",\n    payload: data\n  };\n};\n\nvar displayLoginError = function displayLoginError(data) {\n  return {\n    type: 'DISPLAY_LOGIN_ERROR',\n    payload: data\n  };\n};\n\nvar loggingIn = function loggingIn(userObject) {\n  return function (dispatch) {\n    fetch(\"\".concat(URL, \"/login%20\"), {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(userObject)\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      if (data.message) {\n        dispatch(displayLoginError(data));\n      } else {\n        dispatch(loggedIn(data));\n        dispatch(fetchingUserInbox(data.user));\n      }\n    });\n  };\n};\n\nvar fetchedUserInbox = function fetchedUserInbox(data) {\n  return {\n    type: \"FETCHED_USER_INBOX\",\n    payload: data\n  };\n};\n\nvar fetchingUserInbox = function fetchingUserInbox(user_id) {\n  var token = localStorage.getItem('token');\n  return function (dispatch) {\n    fetch(\"\".concat(URL, \"/users/\").concat(user_id), {\n      method: 'GET',\n      headers: {\n        \"Authentication\": \"Bearer \".concat(token),\n        \"userInbox\": true\n      }\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      dispatch(fetchedUserInbox(data));\n    });\n  };\n};\n\nvar userLogout = function userLogout() {\n  return {\n    type: 'USER_LOGOUT'\n  };\n};\n\nexport { loggingIn, userLogout };","map":{"version":3,"sources":["/Users/flatironschool/Development/Porfolio/module_5/poker_app_frontend/src/redux/actions/login.js"],"names":["URL","loggedIn","data","localStorage","setItem","jwt","user","type","payload","displayLoginError","loggingIn","userObject","dispatch","fetch","method","headers","body","JSON","stringify","then","res","json","message","fetchingUserInbox","fetchedUserInbox","user_id","token","getItem","userLogout"],"mappings":"AAAA;AACA,IAAMA,GAAG,GAAG,uDAAZ;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,IAAD,EAAU;AACzBC,EAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BF,IAAI,CAACG,GAAnC;AACAF,EAAAA,YAAY,CAACC,OAAb,CAAqB,aAArB,EAAoCF,IAAI,CAACI,IAAzC;AACA,SAAO;AACLC,IAAAA,IAAI,EAAC,WADA;AAELC,IAAAA,OAAO,EAAEN;AAFJ,GAAP;AAID,CAPD;;AASA,IAAMO,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAP,IAAI,EAAI;AAChC,SAAO;AACLK,IAAAA,IAAI,EAAC,qBADA;AAELC,IAAAA,OAAO,EAAEN;AAFJ,GAAP;AAID,CALD;;AAOA,IAAMQ,SAAS,GAAG,SAAZA,SAAY,CAACC,UAAD,EAAgB;AAChC,SAAO,UAAAC,QAAQ,EAAI;AACjBC,IAAAA,KAAK,WAAIb,GAAJ,gBAAoB;AACvBc,MAAAA,MAAM,EAAE,MADe;AAEvBC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFc;AAKvBC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,UAAf;AALiB,KAApB,CAAL,CAOGQ,IAPH,CAOQ,UAAAC,GAAG;AAAA,aAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,KAPX,EAQGF,IARH,CAQQ,UAAAjB,IAAI,EAAI;AACZ,UAAIA,IAAI,CAACoB,OAAT,EAAkB;AAChBV,QAAAA,QAAQ,CAACH,iBAAiB,CAACP,IAAD,CAAlB,CAAR;AACD,OAFD,MAEO;AACLU,QAAAA,QAAQ,CAACX,QAAQ,CAACC,IAAD,CAAT,CAAR;AACAU,QAAAA,QAAQ,CAACW,iBAAiB,CAACrB,IAAI,CAACI,IAAN,CAAlB,CAAR;AACD;AACF,KAfH;AAiBD,GAlBD;AAmBD,CApBD;;AAsBA,IAAMkB,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACtB,IAAD,EAAU;AACjC,SAAO;AACLK,IAAAA,IAAI,EAAC,oBADA;AAELC,IAAAA,OAAO,EAAEN;AAFJ,GAAP;AAID,CALD;;AAOA,IAAMqB,iBAAiB,GAAG,SAApBA,iBAAoB,CAACE,OAAD,EAAa;AACrC,MAAIC,KAAK,GAAGvB,YAAY,CAACwB,OAAb,CAAqB,OAArB,CAAZ;AACA,SAAO,UAACf,QAAD,EAAc;AACnBC,IAAAA,KAAK,WAAIb,GAAJ,oBAAiByB,OAAjB,GAA4B;AAC/BX,MAAAA,MAAM,EAAE,KADuB;AAE/BC,MAAAA,OAAO,EAAE;AACP,2CAA6BW,KAA7B,CADO;AAEP,qBAAa;AAFN;AAFsB,KAA5B,CAAL,CAOCP,IAPD,CAOM,UAAAC,GAAG;AAAA,aAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,KAPT,EAQCF,IARD,CAQM,UAAAjB,IAAI,EAAI;AACZU,MAAAA,QAAQ,CAACY,gBAAgB,CAACtB,IAAD,CAAjB,CAAR;AACD,KAVD;AAWD,GAZD;AAaD,CAfD;;AAiBA,IAAM0B,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvB,SAAO;AACLrB,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJD;;AAMA,SAASG,SAAT,EAAoBkB,UAApB","sourcesContent":["// const URL = 'http://localhost:3001/api/v1'\nconst URL = 'https://project-bankroll-backend.herokuapp.com/api/v1'\n\nconst loggedIn = (data) => {\n  localStorage.setItem('token', data.jwt)\n  localStorage.setItem('currentUser', data.user)\n  return {\n    type:\"LOGGED_IN\",\n    payload: data\n  }\n}\n\nconst displayLoginError = data => {\n  return {\n    type:'DISPLAY_LOGIN_ERROR',\n    payload: data\n  }\n}\n\nconst loggingIn = (userObject) => {\n  return dispatch => {\n    fetch(`${URL}/login%20`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(userObject)\n    })\n      .then(res => res.json())\n      .then(data => {\n        if (data.message) {\n          dispatch(displayLoginError(data))\n        } else {\n          dispatch(loggedIn(data))\n          dispatch(fetchingUserInbox(data.user))\n        }\n      }\n    )\n  }\n}\n\nconst fetchedUserInbox = (data) => {\n  return {\n    type:\"FETCHED_USER_INBOX\",\n    payload: data\n  }\n}\n\nconst fetchingUserInbox = (user_id) => {\n  let token = localStorage.getItem('token')\n  return (dispatch) => {\n    fetch(`${URL}/users/${user_id}`, {\n      method: 'GET',\n      headers: {\n        \"Authentication\" : `Bearer ${token}`,\n        \"userInbox\": true\n      }\n    })\n    .then(res => res.json())\n    .then(data => {\n      dispatch(fetchedUserInbox(data))\n    })\n  }\n}\n\nconst userLogout = () => {\n  return {\n    type: 'USER_LOGOUT'\n  }\n}\n\nexport { loggingIn, userLogout };\n"]},"metadata":{},"sourceType":"module"}