{"ast":null,"code":"import _classCallCheck from \"/Users/flatironschool/Development/module_5/poker_app_frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/flatironschool/Development/module_5/poker_app_frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/flatironschool/Development/module_5/poker_app_frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/flatironschool/Development/module_5/poker_app_frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/flatironschool/Development/module_5/poker_app_frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/flatironschool/Development/module_5/poker_app_frontend/src/react/homepage/dashboard.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './dashboard.css';\nimport { fetchingUserData } from '../../redux/actions/users.js';\nimport WinningPercentage from './winningpercentage';\nimport OverTime from './overtime';\n\nvar Dashboard =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Dashboard, _Component);\n\n  function Dashboard() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Dashboard);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Dashboard)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.winLossPercentage = function () {\n      var winCount = 0;\n      var lossCount = 0;\n\n      for (var i = 0; i < _this.props.sessions.length; i++) {\n        if (_this.props.sessions[i].amount > 0) {\n          winCount++;\n        } else {\n          lossCount++;\n        }\n      }\n\n      var winningPercentageData = [winCount, lossCount];\n      return winningPercentageData;\n    };\n\n    _this.createOverTimeLabels = function () {\n      var moment = require('moment');\n\n      var overTimeLabels = {}; // RETURNS DATE ARRAY SORTED FROM OLDEST DATE FIRST TO MOST CURRENT DATE LAST\n\n      function dateSorter(arr) {\n        return arr.sort(function (a, b) {\n          var dateA = new Date(a);\n          var dateB = new Date(b);\n          return dateA - dateB;\n        });\n      }\n\n      var last30DayArray = [];\n\n      for (var i = 0; i < 30; i++) {\n        var day = moment().subtract(i, 'days').format('l');\n        last30DayArray.push(day);\n      }\n\n      last30DayArray = dateSorter(last30DayArray);\n      var last12WeekArray = [];\n\n      for (var _i = 0; _i < 12; _i++) {\n        var week = moment().subtract(_i, 'weeks').format('l');\n        last12WeekArray.push(week);\n      }\n\n      last12WeekArray = dateSorter(last12WeekArray);\n      var last12MonthArray = [];\n\n      for (var _i2 = 0; _i2 < 12; _i2++) {\n        var month = moment().subtract(_i2, 'months').format('l');\n        last12MonthArray.push(month);\n      }\n\n      last12MonthArray = dateSorter(last12MonthArray);\n      overTimeLabels = {\n        '30days': last30DayArray,\n        '12weeks': last12WeekArray,\n        '12months': last12MonthArray\n      };\n      return overTimeLabels;\n    };\n\n    _this.overTimeDataPoints = function () {\n      var overTimeDataPoints;\n\n      var overTimeLabels = _this.createOverTimeLabels();\n\n      var userSessions = _this.props.sessions;\n      var monthDates = overTimeLabels['30days'];\n      var monthValues = []; // POPULATES monthValues ARRAY W/ RUNNING TOTAL PER DATE\n\n      var _loop = function _loop(i) {\n        var startDate = new Date(monthDates[i]);\n        var endDate = new Date(monthDates[monthDates.length - 1]); // RETURNS ALL SESSION OBJECTS BETWEEN START AND END DATE\n\n        var filteredSessions = userSessions.filter(function (session) {\n          var sessionDate = new Date(session.date);\n          return sessionDate <= endDate && sessionDate >= startDate;\n        }); // RETURNS ARRAY WITH RUNNING TOTAL PER DATE\n\n        var mappedSessionTotals = filteredSessions.map(function (session) {\n          return session.amount;\n        });\n\n        var reducer = function reducer(sum, currentValue) {\n          return sum + currentValue;\n        };\n\n        var dateSum = mappedSessionTotals.reduce(reducer, 0);\n        monthValues.unshift(parseInt(dateSum));\n      };\n\n      for (var i = 0; i < monthDates.length; i++) {\n        _loop(i);\n      }\n\n      console.log(monthValues);\n      var quarterDates = overTimeLabels['12weeks'];\n\n      function getRunningTotal(datesArr) {\n        var dateValues = []; // POPULATES monthValues ARRAY W/ RUNNING TOTAL PER DATE\n\n        var _loop2 = function _loop2(i) {\n          var startDate = new Date(datesArr[i]);\n          var endDate = new Date(datesArr[datesArr.length - 1]); // RETURNS ALL SESSION OBJECTS BETWEEN START AND END DATE\n\n          var filteredSessions = userSessions.filter(function (session) {\n            var sessionDate = new Date(session.date);\n            return sessionDate <= endDate && sessionDate >= startDate;\n          }); // RETURNS ARRAY WITH RUNNING TOTAL PER DATE\n\n          var mappedSessionTotals = filteredSessions.map(function (session) {\n            return session.amount;\n          });\n\n          var reducer = function reducer(sum, currentValue) {\n            return sum + currentValue;\n          };\n\n          var dateSum = mappedSessionTotals.reduce(reducer, 0);\n          dateValues.unshift(parseInt(dateSum));\n        };\n\n        for (var i = 0; i < datesArr.length; i++) {\n          _loop2(i);\n        }\n\n        return dateValues;\n      }\n\n      overTimeDataPoints = {\n        '30days': monthValues\n      };\n      return overTimeDataPoints;\n    };\n\n    return _this;\n  }\n\n  _createClass(Dashboard, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.fetchingUserData();\n    } // RETURNS AN ARRAY OF WINNING SESSION COUNT AND LOSING SESSIONS COUNT\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, this.props.sessions ? React.createElement(OverTime, {\n        labels: this.createOverTimeLabels(),\n        data: this.overTimeDataPoints(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }) : null, this.props.sessions ? React.createElement(WinningPercentage, {\n        data: this.winLossPercentage(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }) : null);\n    }\n  }]);\n\n  return Dashboard;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    username: state.user.username,\n    first_name: state.user.first_name,\n    last_name: state.user.last_name,\n    sessions: state.user.sessions\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchingUserData: fetchingUserData\n})(Dashboard);","map":{"version":3,"sources":["/Users/flatironschool/Development/module_5/poker_app_frontend/src/react/homepage/dashboard.js"],"names":["React","Component","connect","fetchingUserData","WinningPercentage","OverTime","Dashboard","winLossPercentage","winCount","lossCount","i","props","sessions","length","amount","winningPercentageData","createOverTimeLabels","moment","require","overTimeLabels","dateSorter","arr","sort","a","b","dateA","Date","dateB","last30DayArray","day","subtract","format","push","last12WeekArray","week","last12MonthArray","month","overTimeDataPoints","userSessions","monthDates","monthValues","startDate","endDate","filteredSessions","filter","session","sessionDate","date","mappedSessionTotals","map","reducer","sum","currentValue","dateSum","reduce","unshift","parseInt","console","log","quarterDates","getRunningTotal","datesArr","dateValues","mapStateToProps","state","username","user","first_name","last_name"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport './dashboard.css';\n\nimport { fetchingUserData } from '../../redux/actions/users.js'\nimport WinningPercentage from './winningpercentage'\nimport OverTime from './overtime'\n\nclass Dashboard extends Component {\n  componentDidMount() {\n    this.props.fetchingUserData()\n  }\n\n\n  // RETURNS AN ARRAY OF WINNING SESSION COUNT AND LOSING SESSIONS COUNT\n  winLossPercentage = () => {\n    let winCount = 0\n    let lossCount = 0\n    for (let i = 0; i < this.props.sessions.length; i++) {\n      if (this.props.sessions[i].amount > 0) {\n        winCount++\n      } else {\n        lossCount++\n      }\n    }\n    let winningPercentageData = [winCount, lossCount]\n    return winningPercentageData\n  }\n\n  // RETURNS AN OBJECT W/ ARRAYS OF THE LAST 30, 90, AND 365 DAYS\n  createOverTimeLabels = () => {\n    let moment = require('moment')\n    let overTimeLabels = {}\n\n    // RETURNS DATE ARRAY SORTED FROM OLDEST DATE FIRST TO MOST CURRENT DATE LAST\n    function dateSorter(arr) {\n      return arr.sort((a,b) => {\n        let dateA = new Date(a)\n        let dateB = new Date(b)\n        return (dateA - dateB)\n        }\n      )\n    }\n\n    let last30DayArray = []\n    for (let i = 0; i < 30; i++) {\n      let day = moment().subtract(i, 'days').format('l')\n      last30DayArray.push(day)\n    }\n\n    last30DayArray = dateSorter(last30DayArray)\n\n    let last12WeekArray = []\n    for (let i = 0; i < 12; i++) {\n      let week = moment().subtract(i, 'weeks').format('l')\n      last12WeekArray.push(week)\n    }\n\n    last12WeekArray = dateSorter(last12WeekArray)\n\n    let last12MonthArray = []\n    for (let i = 0; i < 12; i++) {\n      let month = moment().subtract(i, 'months').format('l')\n      last12MonthArray.push(month)\n    }\n\n    last12MonthArray = dateSorter(last12MonthArray)\n\n    overTimeLabels = {\n      '30days': last30DayArray,\n      '12weeks': last12WeekArray,\n      '12months': last12MonthArray\n    }\n\n    return overTimeLabels\n  }\n\n  // RETURNS AN OBJECT W/ ARRAYS TRACKING THE TOTAL FOR THE 30, 90, 365 DAYS\n  overTimeDataPoints = () => {\n    let overTimeDataPoints;\n    let overTimeLabels = this.createOverTimeLabels()\n    let userSessions = this.props.sessions\n\n    let monthDates = overTimeLabels['30days']\n    let monthValues = []\n\n    // POPULATES monthValues ARRAY W/ RUNNING TOTAL PER DATE\n    for (let i = 0; i < monthDates.length ; i++) {\n      let startDate = new Date(monthDates[i])\n      let endDate = new Date(monthDates[monthDates.length-1])\n\n      // RETURNS ALL SESSION OBJECTS BETWEEN START AND END DATE\n      let filteredSessions = userSessions.filter(session => {\n        let sessionDate = new Date(session.date)\n        return (sessionDate <= endDate && sessionDate >= startDate)\n      })\n\n      // RETURNS ARRAY WITH RUNNING TOTAL PER DATE\n      let mappedSessionTotals = filteredSessions.map(session => session.amount)\n      const reducer = (sum, currentValue) => sum + currentValue\n      let dateSum = mappedSessionTotals.reduce(reducer, 0)\n\n      monthValues.unshift(parseInt(dateSum))\n    }\n\n    console.log(monthValues)\n\n    let quarterDates = overTimeLabels['12weeks']\n\n    function getRunningTotal(datesArr) {\n      let dateValues = []\n      // POPULATES monthValues ARRAY W/ RUNNING TOTAL PER DATE\n      for (let i = 0; i < datesArr.length ; i++) {\n        let startDate = new Date(datesArr[i])\n        let endDate = new Date(datesArr[datesArr.length-1])\n\n        // RETURNS ALL SESSION OBJECTS BETWEEN START AND END DATE\n        let filteredSessions = userSessions.filter(session => {\n          let sessionDate = new Date(session.date)\n          return (sessionDate <= endDate && sessionDate >= startDate)\n        })\n\n        // RETURNS ARRAY WITH RUNNING TOTAL PER DATE\n        let mappedSessionTotals = filteredSessions.map(session => session.amount)\n        const reducer = (sum, currentValue) => sum + currentValue\n        let dateSum = mappedSessionTotals.reduce(reducer, 0)\n\n        dateValues.unshift(parseInt(dateSum))\n      }\n      return dateValues\n    }\n\n\n    overTimeDataPoints={\n      '30days': monthValues\n    }\n\n    return overTimeDataPoints\n  }\n\n  render() {\n\n    return (\n      <div>\n        {this.props.sessions ? <OverTime labels={this.createOverTimeLabels()} data={this.overTimeDataPoints()}/> : null}\n        {this.props.sessions ? <WinningPercentage data={this.winLossPercentage()}/> : null}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    username: state.user.username,\n    first_name: state.user.first_name,\n    last_name: state.user.last_name,\n    sessions: state.user.sessions\n  }\n}\n\nexport default connect(mapStateToProps, { fetchingUserData })(Dashboard);\n"]},"metadata":{},"sourceType":"module"}