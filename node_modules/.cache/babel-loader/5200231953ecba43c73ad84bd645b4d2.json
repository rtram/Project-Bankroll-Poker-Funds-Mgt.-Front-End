{"ast":null,"code":"import _classCallCheck from \"/Users/flatironschool/Development/module_5/poker_app_frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/flatironschool/Development/module_5/poker_app_frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/flatironschool/Development/module_5/poker_app_frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/flatironschool/Development/module_5/poker_app_frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/flatironschool/Development/module_5/poker_app_frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/flatironschool/Development/module_5/poker_app_frontend/src/react/inbox/ReceivedRequest.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Container, Divider, Header, Button } from 'semantic-ui-react';\nimport { completingTransaction, deletingRequest } from '../../redux/actions/requests';\nimport { updatingUserBalance, updatingRecipientBalance } from '../../redux/actions/balances';\n\nvar ReceivedRequest =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ReceivedRequest, _Component);\n\n  function ReceivedRequest() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ReceivedRequest);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ReceivedRequest)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.handleComplete = function () {\n      var currentUserBalanceObject = {\n        id: localStorage.getItem('currentUser'),\n        balance: _this.calculateTotal()\n      };\n      var recipientBalance = parseFloat(_this.props.request.requestor.balance) + parseFloat(_this.props.request.amount);\n      var recipientBalanceObject = {\n        id: _this.props.request.requestor.id,\n        balance: recipientBalance\n      };\n\n      _this.props.updatingUserBalance(currentUserBalanceObject);\n\n      _this.props.updatingRecipientBalance(recipientBalanceObject);\n\n      var transactionObject = {\n        sender_id: _this.props.request.requestee.id,\n        recipient_id: _this.props.request.requestor.id,\n        message: _this.props.request.message,\n        amount: _this.props.request.amount,\n        date: _this.formatDate()\n      };\n\n      _this.props.completingTransaction(transactionObject, _this.props.request);\n    };\n\n    _this.handleCancel = function () {\n      _this.props.deletingRequest(_this.props.request);\n    };\n\n    _this.formatDate = function () {\n      var d = new Date(),\n          month = '' + (d.getMonth() + 1),\n          day = '' + d.getDate(),\n          year = d.getFullYear();\n      if (month.length < 2) month = '0' + month;\n      if (day.length < 2) day = '0' + day;\n      return [year, month, day].join('-');\n    };\n\n    _this.calculateTotal = function () {\n      var balance = _this.props.balance;\n\n      if (isNaN(balance)) {\n        balance = 0;\n      }\n\n      var payment = _this.props.request.amount;\n      var newTotal = parseFloat(balance) - parseFloat(payment);\n      return newTotal;\n    };\n\n    return _this;\n  }\n\n  _createClass(ReceivedRequest, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(Header, {\n        as: \"h3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, this.props.request.requestor.first_name, \" \", this.props.request.requestor.last_name), React.createElement(Header, {\n        as: \"h4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, this.props.request.date), React.createElement(Header, {\n        as: \"h4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, \"Amount: \", this.props.request.amount), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, this.props.request.message), React.createElement(Button, {\n        onClick: this.handleComplete,\n        color: \"green\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, \"Complete\"), React.createElement(Button, {\n        onClick: this.handleCancel,\n        color: \"red\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, \"Reject\"), React.createElement(Divider, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return ReceivedRequest;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    balance: state.balance\n  };\n};\n\nexport default connect(mapStateToProps, {\n  completingTransaction: completingTransaction,\n  updatingUserBalance: updatingUserBalance,\n  updatingRecipientBalance: updatingRecipientBalance,\n  deletingRequest: deletingRequest\n})(ReceivedRequest);","map":{"version":3,"sources":["/Users/flatironschool/Development/module_5/poker_app_frontend/src/react/inbox/ReceivedRequest.js"],"names":["React","Component","connect","Container","Divider","Header","Button","completingTransaction","deletingRequest","updatingUserBalance","updatingRecipientBalance","ReceivedRequest","handleComplete","currentUserBalanceObject","id","localStorage","getItem","balance","calculateTotal","recipientBalance","parseFloat","props","request","requestor","amount","recipientBalanceObject","transactionObject","sender_id","requestee","recipient_id","message","date","formatDate","handleCancel","d","Date","month","getMonth","day","getDate","year","getFullYear","length","join","isNaN","payment","newTotal","first_name","last_name","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Container, Divider, Header, Button } from 'semantic-ui-react'\n\nimport { completingTransaction, deletingRequest } from '../../redux/actions/requests'\nimport { updatingUserBalance, updatingRecipientBalance } from '../../redux/actions/balances'\n\nclass ReceivedRequest extends Component {\n\n  handleComplete = () => {\n    let currentUserBalanceObject = {\n      id: localStorage.getItem('currentUser'),\n      balance: this.calculateTotal()\n    }\n\n    let recipientBalance = parseFloat(this.props.request.requestor.balance) + parseFloat(this.props.request.amount)\n\n    let recipientBalanceObject = {\n      id: this.props.request.requestor.id,\n      balance: recipientBalance\n    }\n\n    this.props.updatingUserBalance(currentUserBalanceObject)\n    this.props.updatingRecipientBalance(recipientBalanceObject)\n\n    let transactionObject = {\n      sender_id: this.props.request.requestee.id,\n      recipient_id: this.props.request.requestor.id,\n      message: this.props.request.message,\n      amount: this.props.request.amount,\n      date: this.formatDate()\n    }\n\n    this.props.completingTransaction(transactionObject, this.props.request)\n  }\n\n  handleCancel = () => {\n    this.props.deletingRequest(this.props.request)\n  }\n\n  // RETURNS THE PRESENT DAY IN PROPER FORMAT\n  formatDate = () => {\n    var d = new Date(),\n        month = '' + (d.getMonth() + 1),\n        day = '' + d.getDate(),\n        year = d.getFullYear();\n\n    if (month.length < 2) month = '0' + month;\n    if (day.length < 2) day = '0' + day;\n\n    return [year, month, day].join('-');\n  }\n\n  // RETURNS UPDATED BALANCE AS THE DIFF OF OLD BALANCE - PAYMENT\n  calculateTotal = () => {\n    let balance = this.props.balance\n    if (isNaN(balance)) {\n      balance = 0\n    }\n    let payment = this.props.request.amount\n\n    let newTotal = parseFloat(balance) - parseFloat(payment)\n    return newTotal\n  }\n\n\n  render() {\n    return(\n      <Container>\n        <Header as='h3'>{this.props.request.requestor.first_name} {this.props.request.requestor.last_name}</Header>\n        <Header as='h4'>{this.props.request.date}</Header>\n        <Header as='h4'>Amount: {this.props.request.amount}</Header>\n        <p>{this.props.request.message}</p>\n        <Button onClick={this.handleComplete} color='green'>Complete</Button>\n        <Button onClick={this.handleCancel} color='red'>Reject</Button>\n        <Divider />\n      </Container>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    balance: state.balance,\n  }\n}\n\nexport default connect(mapStateToProps, { completingTransaction, updatingUserBalance, updatingRecipientBalance, deletingRequest })(ReceivedRequest)\n"]},"metadata":{},"sourceType":"module"}