{"ast":null,"code":"import _classCallCheck from \"/Users/flatironschool/Development/Porfolio/module_5/poker_app_frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/flatironschool/Development/Porfolio/module_5/poker_app_frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/flatironschool/Development/Porfolio/module_5/poker_app_frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/flatironschool/Development/Porfolio/module_5/poker_app_frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/flatironschool/Development/Porfolio/module_5/poker_app_frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/flatironschool/Development/Porfolio/module_5/poker_app_frontend/src/react/pokerdashboard/PokerDashboard.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport '../../App.css';\nimport './Dashboard.css';\nimport { Container, Grid, Header, Icon, Divider } from 'semantic-ui-react';\nimport { fetchingSessions } from '../../redux/actions/users.js';\nimport { fetchingUserBalances } from '../../redux/actions/users.js'; // GRAPH IMPORTS\n\nimport WinningPercentageDoughnutGraph from './WinningPercentageDoughnutGraph';\nimport OverTimeLineGraph from './OverTimeLineGraph';\nimport Hourly from './Hourly'; // SESSION PANE IMPORT\n\nimport SessionContainer from './sessioncontainer/SessionContainer';\n\nvar moment = require('moment');\n\nvar PokerDashboard =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PokerDashboard, _Component);\n\n  function PokerDashboard() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, PokerDashboard);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PokerDashboard)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.winLossPercentage = function () {\n      var winCount = 0;\n      var lossCount = 0;\n\n      for (var i = 0; i < _this.props.sessions.length; i++) {\n        if (_this.props.sessions[i].amount > 0) {\n          winCount++;\n        } else {\n          lossCount++;\n        }\n      }\n\n      var winningPercentageData = [winCount, lossCount];\n      return winningPercentageData;\n    };\n\n    _this.dateSorter = function (arr) {\n      return arr.sort(function (a, b) {\n        var dateA = new Date(a);\n        var dateB = new Date(b);\n        return dateA - dateB;\n      });\n    };\n\n    _this.thirtyDayLabels = function () {\n      var last30DayArray = [];\n\n      for (var i = 0; i < 30; i++) {\n        var day = moment().subtract(i, 'days').format('l');\n        last30DayArray.push(day);\n      }\n\n      return last30DayArray;\n    };\n\n    _this.twelveWeekLabels = function () {\n      var last12WeekArray = [];\n\n      for (var i = 0; i < 12; i++) {\n        var week = moment().subtract(i, 'weeks').format('l');\n        last12WeekArray.push(week);\n      }\n\n      return last12WeekArray;\n    };\n\n    _this.twelveMonthLabels = function () {\n      var last12MonthArray = [];\n\n      for (var i = 0; i < 12; i++) {\n        var month = moment().subtract(i, 'months').format('l');\n        last12MonthArray.push(month);\n      }\n\n      return last12MonthArray;\n    };\n\n    _this.createOverTimeLabels = function () {\n      var last30DayArray = _this.dateSorter(_this.thirtyDayLabels());\n\n      var last12WeekArray = _this.dateSorter(_this.twelveWeekLabels());\n\n      var last12MonthArray = _this.dateSorter(_this.twelveMonthLabels());\n\n      var overTimeLabels = {\n        '30days': last30DayArray,\n        '12weeks': last12WeekArray,\n        '12months': last12MonthArray\n      };\n      return overTimeLabels;\n    };\n\n    _this.filterSessions = function (startDate, endDate) {\n      return _this.props.sessions.filter(function (session) {\n        var sessionDate = new Date(session.date);\n        return sessionDate >= startDate && sessionDate <= endDate;\n      });\n    };\n\n    _this.arrayReducer = function (arr) {\n      var reducer = function reducer(sum, currentValue) {\n        return sum + currentValue;\n      };\n\n      return arr.reduce(reducer, 0);\n    };\n\n    _this.getRunningTotal = function (datesArr) {\n      var dateValues = []; // POPULATES monthValues ARRAY W/ RUNNING TOTAL PER DATE\n\n      for (var i = 0; i < datesArr.length; i++) {\n        var startDate = new Date(datesArr[0]);\n        var endDate = new Date(datesArr[i]);\n\n        var filteredSessions = _this.filterSessions(startDate, endDate); // RETURNS ARRAY WITH RUNNING TOTAL PER DATE\n\n\n        var mappedSessionTotals = filteredSessions.map(function (session) {\n          return session.amount;\n        });\n\n        var dateSum = _this.arrayReducer(mappedSessionTotals);\n\n        dateValues.push(parseInt(dateSum));\n      }\n\n      return dateValues;\n    };\n\n    _this.overTimeDataPoints = function () {\n      var overTimeLabels = _this.createOverTimeLabels();\n\n      var monthDates = overTimeLabels['30days'];\n      var quarterDates = overTimeLabels['12weeks'];\n      var yearDates = overTimeLabels['12months'];\n\n      var monthValues = _this.getRunningTotal(monthDates);\n\n      var quarterValues = _this.getRunningTotal(quarterDates);\n\n      var yearValues = _this.getRunningTotal(yearDates);\n\n      var overTimeDataPoints = {\n        '30days': monthValues,\n        '12weeks': quarterValues,\n        '12months': yearValues\n      };\n      return overTimeDataPoints;\n    };\n\n    _this.calculateHourlyAmountTotal = function () {\n      var amountObjectArr = _this.props.sessions.map(function (session) {\n        return session.amount;\n      });\n\n      return _this.arrayReducer(amountObjectArr);\n    };\n\n    _this.calculateHourlyHourTotal = function () {\n      var hourObjectArr = _this.props.sessions.map(function (session) {\n        return session.hours;\n      });\n\n      return _this.arrayReducer(hourObjectArr);\n    };\n\n    _this.hourlyCalculator = function () {\n      var totalAmount = _this.calculateHourlyAmountTotal();\n\n      var totalHours = _this.calculateHourlyHourTotal();\n\n      var hourly = totalAmount / totalHours;\n      var twoDecimalHourly = Math.round(hourly * 100) / 100;\n      return twoDecimalHourly;\n    };\n\n    return _this;\n  }\n\n  _createClass(PokerDashboard, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.fetchingSessions(localStorage.getItem('currentUser'));\n      this.props.fetchingUserBalances(localStorage.getItem('currentUser'));\n    } // RETURNS AN ARRAY OF WINNING SESSION COUNT AND LOSING SESSIONS COUNT\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        class: \"body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, React.createElement(Header, {\n        style: {\n          fontSize: '4em',\n          color: 'white'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, \"Welcome Back, \", this.props.user.first_name), React.createElement(Grid, {\n        style: {\n          marginTop: '3em'\n        },\n        columns: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, React.createElement(Grid.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, React.createElement(Grid.Column, {\n        width: 8,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, React.createElement(Header, {\n        style: {},\n        as: \"h1\",\n        icon: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        name: \"chart line\",\n        circular: true,\n        color: \"red\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }), \"Performance\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, \"This detailed graph shows how you have been performing over a period time.  Use the buttons beneath to see the peaks and valleys of your poker career!\"), this.props.sessions ? React.createElement(OverTimeLineGraph, {\n        labels: this.createOverTimeLabels(),\n        data: this.overTimeDataPoints(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }) : null), React.createElement(Grid.Column, {\n        style: {\n          marginRight: '3em'\n        },\n        width: 7,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, React.createElement(Header, {\n        style: {},\n        as: \"h1\",\n        icon: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        name: \"percent\",\n        circular: true,\n        color: \"green\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }), \"Win Rate\"), this.props.sessions ? React.createElement(WinningPercentageDoughnutGraph, {\n        data: this.winLossPercentage(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }) : null)), React.createElement(Divider, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }), React.createElement(Grid.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, React.createElement(Container, {\n        style: {},\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, this.props.sessions ? React.createElement(Hourly, {\n        data: this.hourlyCalculator(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }) : null)), React.createElement(Divider, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }), React.createElement(Grid.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, React.createElement(SessionContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return PokerDashboard;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    sessions: state.sessions,\n    user: state.user\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchingSessions: fetchingSessions,\n  fetchingUserBalances: fetchingUserBalances\n})(PokerDashboard);","map":{"version":3,"sources":["/Users/flatironschool/Development/Porfolio/module_5/poker_app_frontend/src/react/pokerdashboard/PokerDashboard.js"],"names":["React","Component","connect","Container","Grid","Header","Icon","Divider","fetchingSessions","fetchingUserBalances","WinningPercentageDoughnutGraph","OverTimeLineGraph","Hourly","SessionContainer","moment","require","PokerDashboard","winLossPercentage","winCount","lossCount","i","props","sessions","length","amount","winningPercentageData","dateSorter","arr","sort","a","b","dateA","Date","dateB","thirtyDayLabels","last30DayArray","day","subtract","format","push","twelveWeekLabels","last12WeekArray","week","twelveMonthLabels","last12MonthArray","month","createOverTimeLabels","overTimeLabels","filterSessions","startDate","endDate","filter","session","sessionDate","date","arrayReducer","reducer","sum","currentValue","reduce","getRunningTotal","datesArr","dateValues","filteredSessions","mappedSessionTotals","map","dateSum","parseInt","overTimeDataPoints","monthDates","quarterDates","yearDates","monthValues","quarterValues","yearValues","calculateHourlyAmountTotal","amountObjectArr","calculateHourlyHourTotal","hourObjectArr","hours","hourlyCalculator","totalAmount","totalHours","hourly","twoDecimalHourly","Math","round","localStorage","getItem","fontSize","color","user","first_name","marginTop","marginRight","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport '../../App.css'\nimport './Dashboard.css';\nimport { Container, Grid, Header, Icon, Divider } from 'semantic-ui-react'\nimport { fetchingSessions } from '../../redux/actions/users.js'\nimport { fetchingUserBalances } from '../../redux/actions/users.js'\n\n// GRAPH IMPORTS\nimport WinningPercentageDoughnutGraph from './WinningPercentageDoughnutGraph'\nimport OverTimeLineGraph from './OverTimeLineGraph'\nimport Hourly from './Hourly'\n\n// SESSION PANE IMPORT\nimport SessionContainer from './sessioncontainer/SessionContainer'\n\nlet moment = require('moment')\n\nclass PokerDashboard extends Component {\n  componentDidMount() {\n    this.props.fetchingSessions(localStorage.getItem('currentUser'))\n    this.props.fetchingUserBalances(localStorage.getItem('currentUser'))\n  }\n\n  // RETURNS AN ARRAY OF WINNING SESSION COUNT AND LOSING SESSIONS COUNT\n  winLossPercentage = () => {\n    let winCount = 0\n    let lossCount = 0\n    for (let i = 0; i < this.props.sessions.length; i++) {\n      if (this.props.sessions[i].amount > 0) {\n        winCount++\n      } else {\n        lossCount++\n      }\n    }\n    let winningPercentageData = [winCount, lossCount]\n    return winningPercentageData\n  }\n\n  // RETURNS DATE ARRAY SORTED FROM OLDEST DATE FIRST TO MOST CURRENT DATE LAST\n  dateSorter = (arr) => (\n    arr.sort((a,b) => {\n       let dateA = new Date(a)\n       let dateB = new Date(b)\n       return (dateA - dateB)\n       }\n     )\n  )\n\n  thirtyDayLabels = () => {\n    let last30DayArray = []\n    for (let i = 0; i < 30; i++) {\n      let day = moment().subtract(i, 'days').format('l')\n      last30DayArray.push(day)\n    }\n    return last30DayArray\n  }\n\n  twelveWeekLabels = () => {\n    let last12WeekArray = []\n    for (let i = 0; i < 12; i++) {\n      let week = moment().subtract(i, 'weeks').format('l')\n      last12WeekArray.push(week)\n    }\n    return last12WeekArray\n  }\n\n  twelveMonthLabels = () => {\n    let last12MonthArray = []\n    for (let i = 0; i < 12; i++) {\n      let month = moment().subtract(i, 'months').format('l')\n      last12MonthArray.push(month)\n    }\n    return last12MonthArray\n  }\n\n  // RETURNS AN OBJECT W/ ARRAYS OF THE LAST 30, 90, AND 365 DAYS\n  createOverTimeLabels = () => {\n    let last30DayArray = this.dateSorter(this.thirtyDayLabels())\n    let last12WeekArray = this.dateSorter(this.twelveWeekLabels())\n    let last12MonthArray = this.dateSorter(this.twelveMonthLabels())\n\n    let overTimeLabels = {\n      '30days': last30DayArray,\n      '12weeks': last12WeekArray,\n      '12months': last12MonthArray\n    }\n\n    return overTimeLabels\n  }\n\n  // RETURNS ALL SESSION OBJECTS BETWEEN START AND END DATE\n  filterSessions = (startDate, endDate) => (\n    this.props.sessions.filter(session => {\n      let sessionDate = new Date(session.date)\n      return (sessionDate >= startDate && sessionDate <= endDate)\n    })\n  )\n\n  arrayReducer = (arr) => {\n    const reducer = (sum, currentValue) => sum + currentValue\n    return arr.reduce(reducer, 0)\n  }\n\n  getRunningTotal = (datesArr) => {\n    let dateValues = []\n\n    // POPULATES monthValues ARRAY W/ RUNNING TOTAL PER DATE\n    for (let i = 0; i < datesArr.length ; i++) {\n      let startDate = new Date(datesArr[0])\n      let endDate = new Date(datesArr[i])\n\n      let filteredSessions = this.filterSessions(startDate, endDate)\n\n      // RETURNS ARRAY WITH RUNNING TOTAL PER DATE\n      let mappedSessionTotals = filteredSessions.map(session => session.amount)\n      let dateSum = this.arrayReducer(mappedSessionTotals)\n\n      dateValues.push(parseInt(dateSum))\n    }\n    return dateValues\n  }\n\n  // RETURNS AN OBJECT W/ ARRAYS TRACKING THE TOTAL FOR THE 30, 90, 365 DAYS\n  overTimeDataPoints = () => {\n    let overTimeLabels = this.createOverTimeLabels()\n\n    let monthDates = overTimeLabels['30days']\n    let quarterDates = overTimeLabels['12weeks']\n    let yearDates = overTimeLabels['12months']\n\n    let monthValues = this.getRunningTotal(monthDates)\n    let quarterValues = this.getRunningTotal(quarterDates)\n    let yearValues = this.getRunningTotal(yearDates)\n\n    let overTimeDataPoints = {\n      '30days': monthValues,\n      '12weeks': quarterValues,\n      '12months': yearValues\n    }\n    return overTimeDataPoints\n  }\n\n  calculateHourlyAmountTotal = () => {\n    let amountObjectArr = this.props.sessions.map(session => session.amount)\n    return this.arrayReducer(amountObjectArr)\n  }\n\n  calculateHourlyHourTotal = () => {\n    let hourObjectArr = this.props.sessions.map(session => session.hours)\n    return this.arrayReducer(hourObjectArr)\n  }\n\n  // RETURNS HOURLY FLOAT ROUNDED TO THE NEAREST TWO DECIMAL PLACE\n  hourlyCalculator = () => {\n    let totalAmount = this.calculateHourlyAmountTotal()\n    let totalHours = this.calculateHourlyHourTotal()\n\n    let hourly = totalAmount/totalHours\n    let twoDecimalHourly = Math.round(hourly * 100) / 100\n\n    return twoDecimalHourly\n  }\n\n  render() {\n\n    return (\n      <div class='body'>\n        <Header style={{ fontSize:'4em', color:'white'}}>\n          Welcome Back, {this.props.user.first_name}\n        </Header>\n        <Grid style={{ marginTop: '3em' }} columns={2}>\n          <Grid.Row>\n            <Grid.Column width={8}>\n            <Header style={{}} as='h1' icon >\n              <Icon name='chart line' circular={true} color='red'/>\n              Performance\n            </Header>\n            <p>This detailed graph shows how you have been performing over a period time.  Use the buttons beneath to see the peaks and valleys of your poker career!</p>\n            {this.props.sessions ? <OverTimeLineGraph labels={this.createOverTimeLabels()} data={this.overTimeDataPoints()}/> : null}\n            </Grid.Column>\n\n            <Grid.Column style={{ marginRight: '3em'}} width={7}>\n            <Header style={{}} as='h1' icon>\n              <Icon name='percent' circular={true} color='green'/>\n              Win Rate\n            </Header>\n            {this.props.sessions ?\n              <WinningPercentageDoughnutGraph data={this.winLossPercentage()}/> : null}\n            </Grid.Column>\n          </Grid.Row>\n          <Divider/>\n          <Grid.Row>\n            <Container\n              style={{\n\n              }}\n            >\n            {this.props.sessions ? <Hourly data={this.hourlyCalculator()}/> : null}\n            </Container>\n          </Grid.Row>\n          <Divider/>\n          <Grid.Row>\n            <SessionContainer />\n          </Grid.Row>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    sessions: state.sessions,\n    user: state.user\n  }\n}\n\nexport default connect(mapStateToProps, { fetchingSessions, fetchingUserBalances })(PokerDashboard);\n"]},"metadata":{},"sourceType":"module"}