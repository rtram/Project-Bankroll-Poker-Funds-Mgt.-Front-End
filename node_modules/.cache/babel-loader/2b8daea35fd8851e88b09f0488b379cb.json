{"ast":null,"code":"import _objectSpread from \"/Users/flatironschool/Development/module_5/poker_app_frontend/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/Users/flatironschool/Development/module_5/poker_app_frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { combineReducers } from 'redux';\n\nvar userListReducer = function userListReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'FETCHED_USER_LIST':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nvar currentUserReducer = function currentUserReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'LOGGED_IN':\n      return action.payload.user;\n\n    case 'USER_LOGOUT':\n      localStorage.clear();\n\n    default:\n      return state;\n  }\n};\n\nvar sessionsReducer = function sessionsReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'FETCHED_SESSIONS':\n      return action.payload;\n\n    case 'POST_SESSION':\n      return [].concat(_toConsumableArray(state), [action.payload]);\n\n    case 'UPDATED_SESSION':\n      var originalSession = state.find(function (session) {\n        return session.id === action.payload.id;\n      });\n      var index = state.indexOf(originalSession);\n\n      var sessionCopy = _toConsumableArray(state);\n\n      sessionCopy.splice(index, 1, action.payload);\n      return sessionCopy;\n\n    case 'DELETED_SESSION':\n      originalSession = state.find(function (session) {\n        return session.id === action.payload.id;\n      });\n      index = state.indexOf(originalSession);\n      sessionCopy = _toConsumableArray(state);\n      sessionCopy.splice(index, 1);\n      return sessionCopy;\n\n    default:\n      return state;\n  }\n};\n\nvar balanceReducer = function balanceReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'FETCHED_USER_DATA':\n      return action.payload.balance;\n\n    case 'UPDATED_USER_BALANCE':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nvar userReducer = function userReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var userObject;\n\n  switch (action.type) {\n    case 'CREATED_USER':\n      userObject = {\n        username: action.payload.username,\n        first_name: action.payload.first_name,\n        last_name: action.payload.last_name\n      };\n      return userObject;\n\n    case 'FETCHED_USER_DATA':\n      userObject = {\n        username: action.payload.username,\n        first_name: action.payload.first_name,\n        last_name: action.payload.last_name\n      };\n      return userObject;\n\n    default:\n      return state;\n  }\n};\n\nvar sentTransactionsReducer = function sentTransactionsReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'FETCHED_USER_DATA':\n      return action.payload.sent_transactions;\n\n    case 'POSTED_TRANSACTION':\n      return [].concat(_toConsumableArray(state), [action.payload]);\n\n    case 'COMPLETED_TRANSACTION':\n      return [].concat(_toConsumableArray(state), [action.payload]);\n\n    default:\n      return state;\n  }\n};\n\nvar receivedTransactionsReducer = function receivedTransactionsReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'FETCHED_USER_DATA':\n      return action.payload.received_transactions;\n\n    default:\n      return state;\n  }\n};\n\nvar errorsReducer = function errorsReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'DISPLAY_ERRORS':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nvar selectedProfileReducer = function selectedProfileReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"FETCHED_SELECTED_PROFILE\":\n      return [action.payload];\n\n    case \"CLEAR_SELECTED_PROFILE\":\n      return [];\n\n    case 'POSTED_TRANSACTION':\n      var stateCopy = [_objectSpread({}, state[0], {\n        received_transactions: [].concat(_toConsumableArray(state[0].received_transactions), [action.payload])\n      })];\n      return stateCopy;\n\n    default:\n      return state;\n  }\n};\n\nvar loginErrorReducer = function loginErrorReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'DISPLAY_LOGIN_ERROR':\n      return [action.payload];\n\n    default:\n      return state;\n  }\n};\n\nvar sessionErrorReducer = function sessionErrorReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'DISPLAY_SESSION_ERRORS':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nvar sentRequestsReducer = function sentRequestsReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'FETCHED_USER_DATA':\n      return action.payload.sent_requests;\n\n    case \"POSTED_REQUEST\":\n      return [].concat(_toConsumableArray(state), [action.payload]);\n\n    case 'DELETED_REQUEST':\n      var originalRequest = state.find(function (request) {\n        return request.id === action.payload.id;\n      });\n      var index = state.indexOf(originalRequest);\n\n      var requestCopy = _toConsumableArray(state);\n\n      requestCopy.splice(index, 1);\n      return requestCopy;\n\n    default:\n      return state;\n  }\n};\n\nvar receivedRequestsReducer = function receivedRequestsReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'FETCHED_USER_DATA':\n      return action.payload.received_requests;\n\n    case 'FETCHED_USER_INBOX':\n      return action.payload;\n\n    case 'DELETED_REQUEST':\n      var originalRequest = state.find(function (request) {\n        return request.id === action.payload.id;\n      });\n      var index = state.indexOf(originalRequest);\n\n      var requestCopy = _toConsumableArray(state);\n\n      requestCopy.splice(index, 1);\n      return requestCopy;\n\n    default:\n      return state;\n  }\n};\n\nvar rootReducer = combineReducers({\n  currentUser: currentUserReducer,\n  user: userReducer,\n  sessions: sessionsReducer,\n  balance: balanceReducer,\n  sent_transactions: sentTransactionsReducer,\n  received_transactions: receivedTransactionsReducer,\n  sent_requests: sentRequestsReducer,\n  received_requests: receivedRequestsReducer,\n  userList: userListReducer,\n  errors: errorsReducer,\n  loginError: loginErrorReducer,\n  sessionError: sessionErrorReducer,\n  selectedProfile: selectedProfileReducer\n}); // const rootReducer = (state, action) => {\n//   if (action.type === 'USER_LOGOUT'){\n//     localStorage.clear()\n//     state = undefined\n//   }\n//\n//   return appReducer(state, action)\n// }\n\nexport default rootReducer;","map":{"version":3,"sources":["/Users/flatironschool/Development/module_5/poker_app_frontend/src/redux/reducers/index.js"],"names":["combineReducers","userListReducer","state","action","type","payload","currentUserReducer","user","localStorage","clear","sessionsReducer","originalSession","find","session","id","index","indexOf","sessionCopy","splice","balanceReducer","balance","userReducer","userObject","username","first_name","last_name","sentTransactionsReducer","sent_transactions","receivedTransactionsReducer","received_transactions","errorsReducer","selectedProfileReducer","stateCopy","loginErrorReducer","sessionErrorReducer","sentRequestsReducer","sent_requests","originalRequest","request","requestCopy","receivedRequestsReducer","received_requests","rootReducer","currentUser","sessions","userList","errors","loginError","sessionError","selectedProfile"],"mappings":"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","sourcesContent":["import { combineReducers } from 'redux'\n\nconst userListReducer = (state = [], action) => {\n  switch(action.type) {\n    case 'FETCHED_USER_LIST':\n      return action.payload\n    default:\n      return state\n  }\n}\n\nconst currentUserReducer = (state = [], action) => {\n  switch(action.type) {\n    case 'LOGGED_IN':\n      return action.payload.user\n    case 'USER_LOGOUT':\n      localStorage.clear()\n    default:\n      return state\n  }\n}\n\nconst sessionsReducer = (state = [], action) => {\n  switch(action.type) {\n    case 'FETCHED_SESSIONS':\n      return action.payload\n    case 'POST_SESSION':\n      return [...state, action.payload]\n    case 'UPDATED_SESSION':\n      let originalSession = state.find(session => session.id === action.payload.id)\n      let index = state.indexOf(originalSession)\n      let sessionCopy = [...state]\n      sessionCopy.splice(index, 1, action.payload)\n      return sessionCopy\n    case 'DELETED_SESSION':\n      originalSession = state.find(session => session.id === action.payload.id)\n      index = state.indexOf(originalSession)\n      sessionCopy = [...state]\n      sessionCopy.splice(index, 1)\n      return sessionCopy\n    default:\n      return state\n  }\n}\n\nconst balanceReducer = (state = 0, action) => {\n  switch(action.type) {\n    case 'FETCHED_USER_DATA':\n      return action.payload.balance\n    case 'UPDATED_USER_BALANCE':\n      return action.payload\n    default:\n      return state\n  }\n}\n\nconst userReducer = (state = {}, action) => {\n  let userObject;\n  switch(action.type) {\n    case 'CREATED_USER':\n       userObject= {\n        username: action.payload.username,\n        first_name: action.payload.first_name,\n        last_name: action.payload.last_name\n      }\n      return userObject\n    case 'FETCHED_USER_DATA':\n      userObject = {\n        username: action.payload.username,\n        first_name: action.payload.first_name,\n        last_name: action.payload.last_name\n      }\n      return userObject\n    default:\n      return state\n  }\n}\n\nconst sentTransactionsReducer = (state = [], action) => {\n  switch(action.type) {\n    case 'FETCHED_USER_DATA':\n      return action.payload.sent_transactions\n    case 'POSTED_TRANSACTION':\n      return [...state, action.payload]\n    case 'COMPLETED_TRANSACTION':\n      return [...state, action.payload]\n    default:\n      return state\n  }\n}\n\nconst receivedTransactionsReducer = (state = [], action) => {\n  switch(action.type) {\n    case 'FETCHED_USER_DATA':\n      return action.payload.received_transactions\n    default:\n      return state\n  }\n}\n\nconst errorsReducer = (state = {}, action) => {\n  switch(action.type) {\n    case 'DISPLAY_ERRORS':\n      return action.payload\n    default:\n      return state\n  }\n}\n\nconst selectedProfileReducer = (state = [], action) => {\n  switch(action.type) {\n    case \"FETCHED_SELECTED_PROFILE\":\n      return [action.payload]\n    case \"CLEAR_SELECTED_PROFILE\":\n      return []\n    case 'POSTED_TRANSACTION':\n      let stateCopy = [{...state[0], received_transactions: [...state[0].received_transactions, action.payload]}]\n      return stateCopy\n    default:\n      return state\n  }\n}\n\nconst loginErrorReducer = (state = [], action) => {\n  switch(action.type) {\n    case 'DISPLAY_LOGIN_ERROR':\n      return [action.payload]\n    default:\n      return state\n  }\n}\n\nconst sessionErrorReducer = (state = [], action) => {\n  switch(action.type) {\n    case 'DISPLAY_SESSION_ERRORS':\n      return action.payload\n    default:\n      return state\n  }\n}\n\nconst sentRequestsReducer = (state = [], action) => {\n  switch(action.type) {\n    case 'FETCHED_USER_DATA':\n      return action.payload.sent_requests\n    case \"POSTED_REQUEST\":\n      return [...state, action.payload]\n    case 'DELETED_REQUEST':\n      let originalRequest = state.find(request => request.id === action.payload.id)\n      let index = state.indexOf(originalRequest)\n      let requestCopy = [...state]\n      requestCopy.splice(index, 1)\n      return requestCopy\n    default:\n      return state\n  }\n}\n\nconst receivedRequestsReducer = (state = [], action) => {\n  switch(action.type) {\n    case 'FETCHED_USER_DATA':\n      return action.payload.received_requests\n    case 'FETCHED_USER_INBOX':\n      return action.payload\n    case 'DELETED_REQUEST':\n      let originalRequest = state.find(request => request.id === action.payload.id)\n      let index = state.indexOf(originalRequest)\n      let requestCopy = [...state]\n      requestCopy.splice(index, 1)\n      return requestCopy\n    default:\n      return state\n  }\n}\n\nconst rootReducer = combineReducers({\n  currentUser: currentUserReducer,\n  user: userReducer,\n  sessions: sessionsReducer,\n  balance: balanceReducer,\n  sent_transactions: sentTransactionsReducer,\n  received_transactions: receivedTransactionsReducer,\n  sent_requests: sentRequestsReducer,\n  received_requests: receivedRequestsReducer,\n  userList: userListReducer,\n  errors: errorsReducer,\n  loginError: loginErrorReducer,\n  sessionError: sessionErrorReducer,\n  selectedProfile: selectedProfileReducer\n});\n\n// const rootReducer = (state, action) => {\n//   if (action.type === 'USER_LOGOUT'){\n//     localStorage.clear()\n//     state = undefined\n//   }\n//\n//   return appReducer(state, action)\n// }\n\nexport default rootReducer;\n"]},"metadata":{},"sourceType":"module"}