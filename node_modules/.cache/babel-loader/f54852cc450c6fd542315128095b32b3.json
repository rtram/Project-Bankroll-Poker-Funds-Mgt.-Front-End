{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.providerContextTypes = undefined;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // TODO(jez) 'sync' and 'async' are bad tag names.\n// TODO(jez) What if redux also uses this.context.tag?\n\n\nvar providerContextTypes = exports.providerContextTypes = {\n  tag: _propTypes2.default.string.isRequired,\n  stripe: _propTypes2.default.object,\n  addStripeLoadListener: _propTypes2.default.func\n};\n\nvar getOrCreateStripe = function getOrCreateStripe(apiKey, options) {\n  /**\n   * Note that this is not meant to be a generic memoization solution.\n   * This is specifically a solution for `StripeProvider`s being initialized\n   * and destroyed regularly (with the same set of props) when users only\n   * use `StripeProvider` for the subtree that contains their checkout form.\n   */\n  window.Stripe.__cachedInstances = window.Stripe.__cachedInstances || {};\n  var cacheKey = 'key=' + apiKey + ' options=' + JSON.stringify(options);\n  var stripe = window.Stripe.__cachedInstances[cacheKey] || window.Stripe(apiKey, options);\n  window.Stripe.__cachedInstances[cacheKey] = stripe;\n  return stripe;\n};\n\nvar ensureStripeShape = function ensureStripeShape(stripe) {\n  if (stripe && stripe.elements && stripe.createSource && stripe.createToken) {\n    return stripe;\n  } else {\n    throw new Error(\"Please pass a valid Stripe object to StripeProvider. You can obtain a Stripe object by calling 'Stripe(...)' with your publishable key.\");\n  }\n};\n\nvar Provider = function (_React$Component) {\n  _inherits(Provider, _React$Component); // on the other hand: childContextTypes is *required* to use context.\n\n\n  function Provider(props) {\n    _classCallCheck(this, Provider);\n\n    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));\n\n    if (_this.props.apiKey && _this.props.stripe) {\n      throw new Error(\"Please pass either 'apiKey' or 'stripe' to StripeProvider, not both.\");\n    } else if (_this.props.apiKey) {\n      if (!window.Stripe) {\n        throw new Error(\"Please load Stripe.js (https://js.stripe.com/v3/) on this page to use react-stripe-elements. If Stripe.js isn't available yet (it's loading asynchronously, or you're using server-side rendering), see https://github.com/stripe/react-stripe-elements#advanced-integrations\");\n      } else {\n        var _this$props = _this.props,\n            _apiKey = _this$props.apiKey,\n            _children = _this$props.children,\n            _stripe = _this$props.stripe,\n            options = _objectWithoutProperties(_this$props, ['apiKey', 'children', 'stripe']);\n\n        _this._meta = {\n          tag: 'sync',\n          stripe: getOrCreateStripe(_apiKey, options)\n        };\n      }\n    } else if (_this.props.stripe) {\n      // If we already have a stripe instance (in the constructor), we can behave synchronously.\n      _this._meta = {\n        tag: 'sync',\n        stripe: ensureStripeShape(_this.props.stripe)\n      };\n    } else if (_this.props.stripe === null) {\n      _this._meta = {\n        tag: 'async',\n        stripe: null\n      };\n    } else {\n      throw new Error(\"Please pass either 'apiKey' or 'stripe' to StripeProvider. If you're using 'stripe' but don't have a Stripe instance yet, pass 'null' explicitly.\");\n    }\n\n    _this._didWarn = false;\n    _this._didWakeUpListeners = false;\n    _this._listeners = [];\n    return _this;\n  } // Even though we're using flow, also use PropTypes so we can take advantage of developer warnings.\n\n\n  Provider.prototype.getChildContext = function getChildContext() {\n    var _this2 = this; // getChildContext is run after the constructor, so we WILL have access to\n    // the initial state.\n    //\n    // However, context doesn't update in respnse to state changes like you\n    // might expect: context is pulled by the child, not pushed by the parent.\n\n\n    if (this._meta.tag === 'sync') {\n      return {\n        tag: 'sync',\n        stripe: this._meta.stripe\n      };\n    } else {\n      return {\n        tag: 'async',\n        addStripeLoadListener: function addStripeLoadListener(fn) {\n          if (_this2._meta.stripe) {\n            fn(_this2._meta.stripe);\n          } else {\n            _this2._listeners.push(fn);\n          }\n        }\n      };\n    }\n  };\n\n  Provider.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    var apiKeyChanged = this.props.apiKey && nextProps.apiKey && this.props.apiKey !== nextProps.apiKey;\n    var stripeInstanceChanged = this.props.stripe && nextProps.stripe && this.props.stripe !== nextProps.stripe;\n\n    if (!this._didWarn && (apiKeyChanged || stripeInstanceChanged) && window.console && window.console.error) {\n      this._didWarn = true; // eslint-disable-next-line no-console\n\n      console.error('StripeProvider does not support changing the apiKey parameter.');\n      return;\n    }\n\n    if (!this._didWakeUpListeners && nextProps.stripe) {\n      // Wake up the listeners if we've finally been given a StripeShape\n      this._didWakeUpListeners = true;\n\n      var _stripe2 = ensureStripeShape(nextProps.stripe);\n\n      this._meta.stripe = _stripe2;\n\n      this._listeners.forEach(function (fn) {\n        fn(_stripe2);\n      });\n    }\n  };\n\n  Provider.prototype.render = function render() {\n    return _react2.default.Children.only(this.props.children);\n  };\n\n  return Provider;\n}(_react2.default.Component);\n\nProvider.propTypes = {\n  apiKey: _propTypes2.default.string,\n  // PropTypes.object is the only way we can accept a Stripe instance\n  // eslint-disable-next-line react/forbid-prop-types\n  stripe: _propTypes2.default.object,\n  children: _propTypes2.default.node\n};\nProvider.childContextTypes = providerContextTypes;\nProvider.defaultProps = {\n  apiKey: undefined,\n  stripe: undefined,\n  children: null\n};\nexports.default = Provider;","map":null,"metadata":{},"sourceType":"script"}