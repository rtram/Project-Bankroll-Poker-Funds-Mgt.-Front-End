{"ast":null,"code":"import _classCallCheck from \"/Users/flatironschool/Development/module_5/poker_app_frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/flatironschool/Development/module_5/poker_app_frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/flatironschool/Development/module_5/poker_app_frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/flatironschool/Development/module_5/poker_app_frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/flatironschool/Development/module_5/poker_app_frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/flatironschool/Development/module_5/poker_app_frontend/src/react/transfer/transactioncontainer/Transaction.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Container, Divider, Header, Icon, Button, Grid, Label } from 'semantic-ui-react';\nimport { postingLike, deletingLike } from '../../../redux/actions/like';\n\nvar Transaction =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Transaction, _Component);\n\n  function Transaction() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Transaction);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Transaction)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.fullNameConverter = function (object, type) {\n      return object[type].first_name + ' ' + object[type].last_name;\n    };\n\n    _this.handleClick = function () {\n      var currentUserId = parseInt(localStorage.getItem('currentUser'));\n      var userIdArray; // RETURNS USER IDS THAT HAVE LIKED TRANSACTION\n\n      if (_this.props.transfer.likes.length > 0) {\n        userIdArray = _this.props.transfer.likes.map(function (transferObject) {\n          return transferObject.user_id;\n        });\n      }\n\n      if (_this.props.transfer.likes.length > 0 && userIdArray.includes(currentUserId)) {\n        var index = userIdArray.indexOf(currentUserId);\n        var originalLike = _this.props.transfer.likes[index];\n        debugger;\n\n        if ('id' in originalLike) {\n          _this.props.deletingLike(originalLike);\n        }\n\n        copyState.splice(index, 1); // this.setState({\n        //   likes: copyState,\n        //   likeCount: this.state.likeCount - 1,\n        // })\n      } else {\n        var likeObject = {\n          transaction_id: _this.props.transfer.id,\n          user_id: currentUserId,\n          first_name: _this.props.user.first_name,\n          last_name: _this.props.user.last_name\n        };\n\n        _this.props.postingLike(likeObject);\n\n        if (copyState.length === 0) {\n          _this.setState({\n            likes: [likeObject],\n            likeCount: _this.state.likeCount + 1\n          });\n        } else {\n          copyState.push(likeObject);\n\n          _this.setState({\n            likes: copyState,\n            likeCount: _this.state.likeCount + 1\n          });\n        }\n      }\n    };\n\n    _this.shortenedLikeList = function () {\n      return _this.state.likes.slice(0, 2);\n    };\n\n    _this.conditionalLikeButton = function () {\n      var currentUserId = parseInt(localStorage.getItem('currentUser'));\n      var userIdArray;\n\n      if (_this.state.likes.length > 0) {\n        userIdArray = _this.state.likes.map(function (transferObject) {\n          return transferObject.user_id;\n        });\n\n        if (userIdArray.includes(currentUserId)) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Transaction, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(Header, {\n        as: \"h3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, this.props.transfer.sender ? this.fullNameConverter(this.props.transfer, 'sender') : 'Somebody', \" paid \", this.props.transfer.recipient ? this.fullNameConverter(this.props.transfer, 'recipient') : 'Somebody', \" $\", this.props.transfer.amount, \" on \", this.props.transfer.date), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, this.props.transfer.message), React.createElement(Grid, {\n        columns: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, React.createElement(Grid.Column, {\n        style: {\n          textAlign: 'right'\n        },\n        width: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, this.conditionalLikeButton() ? React.createElement(Button, {\n        color: \"blue\",\n        onClick: this.handleClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        name: \"like\",\n        color: \"red\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }), this.state.likeCount) : React.createElement(Button, {\n        color: \"white\",\n        onClick: this.handleClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        name: \"like\",\n        color: \"red\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }), this.state.likeCount)), React.createElement(Grid.Column, {\n        width: 10,\n        style: {\n          margin: 'auto',\n          textAlign: 'left'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, this.shortenedLikeList().length === 0 ? React.createElement(Label, {\n        color: \"grey\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, \"Be the first to like this.\") : null, this.shortenedLikeList().map(function (userObject) {\n        return React.createElement(Label, {\n          color: \"green\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 140\n          },\n          __self: this\n        }, userObject.first_name + ' ' + userObject.last_name);\n      }), this.state.likeCount > 2 ? React.createElement(Label, {\n        color: \"green\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, \"...\") : null))), React.createElement(Divider, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Transaction;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    user: state.user\n  };\n};\n\nexport default connect(mapStateToProps, {\n  postingLike: postingLike,\n  deletingLike: deletingLike\n})(Transaction);","map":{"version":3,"sources":["/Users/flatironschool/Development/module_5/poker_app_frontend/src/react/transfer/transactioncontainer/Transaction.js"],"names":["React","Component","connect","Container","Divider","Header","Icon","Button","Grid","Label","postingLike","deletingLike","Transaction","fullNameConverter","object","type","first_name","last_name","handleClick","currentUserId","parseInt","localStorage","getItem","userIdArray","props","transfer","likes","length","map","transferObject","user_id","includes","index","indexOf","originalLike","copyState","splice","likeObject","transaction_id","id","user","setState","likeCount","state","push","shortenedLikeList","slice","conditionalLikeButton","sender","recipient","amount","date","message","textAlign","margin","userObject","mapStateToProps"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,SAAT,EAAoBC,OAApB,EAA6BC,MAA7B,EAAqCC,IAArC,EAA2CC,MAA3C,EAAmDC,IAAnD,EAAyDC,KAAzD,QAAsE,mBAAtE;AACA,SAASC,WAAT,EAAsBC,YAAtB,QAA0C,6BAA1C;;IAIMC,W;;;;;;;;;;;;;;;;;;UAmBJC,iB,GAAoB,UAACC,MAAD,EAASC,IAAT,EAAkB;AACpC,aAAOD,MAAM,CAACC,IAAD,CAAN,CAAaC,UAAb,GAA0B,GAA1B,GAAgCF,MAAM,CAACC,IAAD,CAAN,CAAaE,SAApD;AACD,K;;UAKDC,W,GAAc,YAAM;AAClB,UAAIC,aAAa,GAAGC,QAAQ,CAACC,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAD,CAA5B;AACA,UAAIC,WAAJ,CAFkB,CAIlB;;AACA,UAAI,MAAKC,KAAL,CAAWC,QAAX,CAAoBC,KAApB,CAA0BC,MAA1B,GAAmC,CAAvC,EAA0C;AACxCJ,QAAAA,WAAW,GAAG,MAAKC,KAAL,CAAWC,QAAX,CAAoBC,KAApB,CAA0BE,GAA1B,CAA8B,UAAAC,cAAc;AAAA,iBAAIA,cAAc,CAACC,OAAnB;AAAA,SAA5C,CAAd;AACD;;AAED,UAAI,MAAKN,KAAL,CAAWC,QAAX,CAAoBC,KAApB,CAA0BC,MAA1B,GAAmC,CAAnC,IAAwCJ,WAAW,CAACQ,QAAZ,CAAqBZ,aAArB,CAA5C,EAAiF;AAC/E,YAAIa,KAAK,GAAGT,WAAW,CAACU,OAAZ,CAAoBd,aAApB,CAAZ;AACA,YAAIe,YAAY,GAAG,MAAKV,KAAL,CAAWC,QAAX,CAAoBC,KAApB,CAA0BM,KAA1B,CAAnB;AACA;;AACA,YAAI,QAAQE,YAAZ,EAA0B;AACxB,gBAAKV,KAAL,CAAWb,YAAX,CAAwBuB,YAAxB;AACD;;AACDC,QAAAA,SAAS,CAACC,MAAV,CAAiBJ,KAAjB,EAAwB,CAAxB,EAP+E,CAQ/E;AACA;AACA;AACA;AACD,OAZD,MAYO;AACL,YAAIK,UAAU,GAAG;AACfC,UAAAA,cAAc,EAAE,MAAKd,KAAL,CAAWC,QAAX,CAAoBc,EADrB;AAEfT,UAAAA,OAAO,EAAEX,aAFM;AAGfH,UAAAA,UAAU,EAAE,MAAKQ,KAAL,CAAWgB,IAAX,CAAgBxB,UAHb;AAIfC,UAAAA,SAAS,EAAE,MAAKO,KAAL,CAAWgB,IAAX,CAAgBvB;AAJZ,SAAjB;;AAMA,cAAKO,KAAL,CAAWd,WAAX,CAAuB2B,UAAvB;;AACA,YAAIF,SAAS,CAACR,MAAV,KAAqB,CAAzB,EAA6B;AAC3B,gBAAKc,QAAL,CAAc;AACZf,YAAAA,KAAK,EAAE,CAACW,UAAD,CADK;AAEZK,YAAAA,SAAS,EAAE,MAAKC,KAAL,CAAWD,SAAX,GAAuB;AAFtB,WAAd;AAID,SALD,MAKO;AACLP,UAAAA,SAAS,CAACS,IAAV,CAAeP,UAAf;;AACA,gBAAKI,QAAL,CAAc;AACZf,YAAAA,KAAK,EAAES,SADK;AAEZO,YAAAA,SAAS,EAAE,MAAKC,KAAL,CAAWD,SAAX,GAAuB;AAFtB,WAAd;AAID;AACF;AACF,K;;UAEDG,iB,GAAoB,YAAM;AACxB,aAAO,MAAKF,KAAL,CAAWjB,KAAX,CAAiBoB,KAAjB,CAAuB,CAAvB,EAA0B,CAA1B,CAAP;AACD,K;;UAGDC,qB,GAAwB,YAAM;AAC5B,UAAI5B,aAAa,GAAGC,QAAQ,CAACC,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAD,CAA5B;AACA,UAAIC,WAAJ;;AAEA,UAAI,MAAKoB,KAAL,CAAWjB,KAAX,CAAiBC,MAAjB,GAA0B,CAA9B,EAAiC;AAC/BJ,QAAAA,WAAW,GAAG,MAAKoB,KAAL,CAAWjB,KAAX,CAAiBE,GAAjB,CAAqB,UAAAC,cAAc;AAAA,iBAAIA,cAAc,CAACC,OAAnB;AAAA,SAAnC,CAAd;;AACA,YAAIP,WAAW,CAACQ,QAAZ,CAAqBZ,aAArB,CAAJ,EAAyC;AACvC,iBAAO,IAAP;AACD,SAFD,MAEO;AACL,iBAAO,KAAP;AACD;AACF;AACF,K;;;;;;;6BAEQ;AACP,aACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEE,oBAAC,MAAD;AAAQ,QAAA,EAAE,EAAC,IAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKK,KAAL,CAAWC,QAAX,CAAoBuB,MAApB,GAA6B,KAAKnC,iBAAL,CAAuB,KAAKW,KAAL,CAAWC,QAAlC,EAA4C,QAA5C,CAA7B,GAAqF,UADxF,YAC0G,KAAKD,KAAL,CAAWC,QAAX,CAAoBwB,SAApB,GAAgC,KAAKpC,iBAAL,CAAuB,KAAKW,KAAL,CAAWC,QAAlC,EAA4C,WAA5C,CAAhC,GAA2F,UADrM,QACoN,KAAKD,KAAL,CAAWC,QAAX,CAAoByB,MADxO,UACoP,KAAK1B,KAAL,CAAWC,QAAX,CAAoB0B,IADxQ,CAFF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAI,KAAK3B,KAAL,CAAWC,QAAX,CAAoB2B,OAAxB,CANF,EAQE,oBAAC,IAAD;AAAM,QAAA,OAAO,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD,CAAM,MAAN;AACE,QAAA,KAAK,EAAE;AACLC,UAAAA,SAAS,EAAE;AADN,SADT;AAIE,QAAA,KAAK,EAAE,CAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAMG,KAAKN,qBAAL,KACC,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,MAAd;AAAqB,QAAA,OAAO,EAAE,KAAK7B,WAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAC,MAAX;AAAkB,QAAA,KAAK,EAAC,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEG,KAAKyB,KAAL,CAAWD,SAFd,CADD,GAKC,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,OAAd;AAAsB,QAAA,OAAO,EAAE,KAAKxB,WAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAC,MAAX;AAAkB,QAAA,KAAK,EAAC,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEG,KAAKyB,KAAL,CAAWD,SAFd,CAXJ,CADF,EAkBE,oBAAC,IAAD,CAAM,MAAN;AACE,QAAA,KAAK,EAAE,EADT;AAEE,QAAA,KAAK,EAAE;AACLY,UAAAA,MAAM,EAAC,MADF;AAELD,UAAAA,SAAS,EAAE;AAFN,SAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAOE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKR,iBAAL,GAAyBlB,MAAzB,KAAoC,CAApC,GACC,oBAAC,KAAD;AAAO,QAAA,KAAK,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCADD,GAIC,IALJ,EAOG,KAAKkB,iBAAL,GAAyBjB,GAAzB,CAA6B,UAAA2B,UAAU;AAAA,eACtC,oBAAC,KAAD;AAAO,UAAA,KAAK,EAAC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACGA,UAAU,CAACvC,UAAX,GAAwB,GAAxB,GAA6BuC,UAAU,CAACtC,SAD3C,CADsC;AAAA,OAAvC,CAPH,EAYG,KAAK0B,KAAL,CAAWD,SAAX,GAAuB,CAAvB,GACC,oBAAC,KAAD;AAAO,QAAA,KAAK,EAAC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADD,GAIG,IAhBN,CAPF,CAlBF,CARF,EAqDE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QArDF,CADF;AAyDD;;;;EAnJuBzC,S;;AAsJ1B,IAAMuD,eAAe,GAAG,SAAlBA,eAAkB,CAAAb,KAAK,EAAI;AAC/B,SAAO;AACLH,IAAAA,IAAI,EAAEG,KAAK,CAACH;AADP,GAAP;AAGD,CAJD;;AAMA,eAAetC,OAAO,CAACsD,eAAD,EAAkB;AAAE9C,EAAAA,WAAW,EAAXA,WAAF;AAAeC,EAAAA,YAAY,EAAZA;AAAf,CAAlB,CAAP,CAAwDC,WAAxD,CAAf","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Container, Divider, Header, Icon, Button, Grid, Label } from 'semantic-ui-react'\nimport { postingLike, deletingLike } from '../../../redux/actions/like'\n\n\n\nclass Transaction extends Component {\n  // constructor() {\n  //   super()\n  //   this.state={\n  //     likes:[],\n  //     likeCount: 0\n  //   }\n  // }\n\n  // componentDidMount() {\n  //   let likeArray = this.props.transfer.likes\n  //\n  //   this.setState({\n  //     likes: likeArray,\n  //     likeCount: likeArray.length\n  //   })\n  // }\n\n  // RETURNS OBJECT SENDER/RECIPIENT'S FULL NAME STRING\n  fullNameConverter = (object, type) => {\n    return object[type].first_name + ' ' + object[type].last_name\n  }\n\n  // IN PROGRESS\n  // FUNCTION ALLOWS USER A MAX OF 1 CLICK PER TRANSACTION\n  // AS IS, THE FUNCTION PERMITS MULTIPLE LIKES IF THE USER CLICKS MULTIPLE TIMES BEFORE THE INITIAL LIKE PERSISTS.\n  handleClick = () => {\n    let currentUserId = parseInt(localStorage.getItem('currentUser'))\n    let userIdArray;\n\n    // RETURNS USER IDS THAT HAVE LIKED TRANSACTION\n    if (this.props.transfer.likes.length > 0) {\n      userIdArray = this.props.transfer.likes.map(transferObject => transferObject.user_id)\n    }\n\n    if (this.props.transfer.likes.length > 0 && userIdArray.includes(currentUserId)) {\n      let index = userIdArray.indexOf(currentUserId)\n      let originalLike = this.props.transfer.likes[index]\n      debugger\n      if ('id' in originalLike) {\n        this.props.deletingLike(originalLike)\n      }\n      copyState.splice(index, 1)\n      // this.setState({\n      //   likes: copyState,\n      //   likeCount: this.state.likeCount - 1,\n      // })\n    } else {\n      let likeObject = {\n        transaction_id: this.props.transfer.id,\n        user_id: currentUserId,\n        first_name: this.props.user.first_name,\n        last_name: this.props.user.last_name\n      }\n      this.props.postingLike(likeObject)\n      if (copyState.length === 0 ) {\n        this.setState({\n          likes: [likeObject],\n          likeCount: this.state.likeCount + 1,\n        })\n      } else {\n        copyState.push(likeObject)\n        this.setState({\n          likes: copyState,\n          likeCount: this.state.likeCount + 1,\n        })\n      }\n    }\n  }\n\n  shortenedLikeList = () => {\n    return this.state.likes.slice(0, 2)\n  }\n\n  // IF CURRENT USER HAS ALREADY LIKED THE TRANSACTION, THE LIKE BUTTON WILL BE A DIFFERENT COLOR.\n  conditionalLikeButton = () => {\n    let currentUserId = parseInt(localStorage.getItem('currentUser'))\n    let userIdArray;\n\n    if (this.state.likes.length > 0) {\n      userIdArray = this.state.likes.map(transferObject => transferObject.user_id)\n      if (userIdArray.includes(currentUserId)) {\n        return true\n      } else {\n        return false\n      }\n    }\n  }\n\n  render() {\n    return(\n      <Container>\n\n        <Header as='h3'>\n          {this.props.transfer.sender ? this.fullNameConverter(this.props.transfer, 'sender') : 'Somebody'} paid {this.props.transfer.recipient ? this.fullNameConverter(this.props.transfer, 'recipient') : 'Somebody' } ${this.props.transfer.amount} on {this.props.transfer.date}\n        </Header>\n\n        <p>{this.props.transfer.message}</p>\n\n        <Grid columns={2}>\n          <Grid.Column\n            style={{\n              textAlign: 'right'\n            }}\n            width={6}\n          >\n            {this.conditionalLikeButton() ?\n              <Button color='blue' onClick={this.handleClick}>\n                <Icon name='like' color='red'/>\n                {this.state.likeCount}\n              </Button> :\n              <Button color='white' onClick={this.handleClick}>\n                <Icon name='like' color='red'/>\n                {this.state.likeCount}\n              </Button>\n            }\n          </Grid.Column>\n          <Grid.Column\n            width={10}\n            style={{\n              margin:'auto',\n              textAlign: 'left'\n            }}\n          >\n            <Container>\n              {this.shortenedLikeList().length === 0 ?\n                <Label color='grey'>\n                  Be the first to like this.\n                </Label>:\n                null\n              }\n              {this.shortenedLikeList().map(userObject => (\n                <Label color='green' >\n                  {userObject.first_name + ' ' +userObject.last_name}\n                </Label>\n              ))}\n              {this.state.likeCount > 2 ?\n                <Label color='green'>\n                  ...\n                </Label>\n                : null}\n            </Container>\n          </Grid.Column>\n        </Grid>\n        <Divider />\n      </Container>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.user\n  }\n}\n\nexport default connect(mapStateToProps, { postingLike, deletingLike })(Transaction)\n"]},"metadata":{},"sourceType":"module"}