{"ast":null,"code":"import { combineReducers } from 'redux';\n\nvar userReducer = function userReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {}\n};\n\nvar userListReducer = function userListReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'FETCHED_USER_LIST':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nvar currentUserReducer = function currentUserReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'LOGGED_IN':\n      return action.payload.user;\n\n    default:\n      return state;\n  }\n};\n\nvar sessionsReducer = function sessionsReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'FETCHED_SESSIONS':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nvar balanceReducer = function balanceReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'FETCHED_USER_BALANCES':\n      debugger;\n\n    default:\n      return state;\n  }\n};\n\nvar rootReducer = combineReducers({\n  currentUser: currentUserReducer,\n  sessions: sessionsReducer,\n  balance: balanceReducer // user: userReducer,\n  // userList: userListReducer,\n\n});\nexport default rootReducer;","map":{"version":3,"sources":["/Users/flatironschool/Development/module_5/poker_app_frontend/src/redux/reducers/index.js"],"names":["combineReducers","userReducer","state","action","type","userListReducer","payload","currentUserReducer","user","sessionsReducer","balanceReducer","rootReducer","currentUser","sessions","balance"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAwB;AAAA,MAAvBC,KAAuB,uEAAf,EAAe;AAAA,MAAXC,MAAW;;AAC1C,UAAOA,MAAM,CAACC,IAAd;AAsBD,CAvBD;;AAyBA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAwB;AAAA,MAAvBH,KAAuB,uEAAf,EAAe;AAAA,MAAXC,MAAW;;AAC9C,UAAOA,MAAM,CAACC,IAAd;AACE,SAAK,mBAAL;AACE,aAAOD,MAAM,CAACG,OAAd;;AACF;AACE,aAAOJ,KAAP;AAJJ;AAMD,CAPD;;AASA,IAAMK,kBAAkB,GAAG,SAArBA,kBAAqB,GAAwB;AAAA,MAAvBL,KAAuB,uEAAf,EAAe;AAAA,MAAXC,MAAW;;AACjD,UAAOA,MAAM,CAACC,IAAd;AACE,SAAK,WAAL;AACE,aAAOD,MAAM,CAACG,OAAP,CAAeE,IAAtB;;AACF;AACE,aAAON,KAAP;AAJJ;AAMD,CAPD;;AASA,IAAMO,eAAe,GAAG,SAAlBA,eAAkB,GAAwB;AAAA,MAAvBP,KAAuB,uEAAf,EAAe;AAAA,MAAXC,MAAW;;AAC9C,UAAOA,MAAM,CAACC,IAAd;AACE,SAAK,kBAAL;AACE,aAAOD,MAAM,CAACG,OAAd;;AACF;AACE,aAAOJ,KAAP;AAJJ;AAMD,CAPD;;AASA,IAAMQ,cAAc,GAAG,SAAjBA,cAAiB,GAAwB;AAAA,MAAvBR,KAAuB,uEAAf,EAAe;AAAA,MAAXC,MAAW;;AAC7C,UAAOA,MAAM,CAACC,IAAd;AACE,SAAK,uBAAL;AACE;;AACF;AACE,aAAOF,KAAP;AAJJ;AAMD,CAPD;;AASA,IAAMS,WAAW,GAAGX,eAAe,CAAC;AAClCY,EAAAA,WAAW,EAAEL,kBADqB;AAElCM,EAAAA,QAAQ,EAAEJ,eAFwB;AAGlCK,EAAAA,OAAO,EAAEJ,cAHyB,CAIlC;AACA;;AALkC,CAAD,CAAnC;AAQA,eAAeC,WAAf","sourcesContent":["import { combineReducers } from 'redux'\n\nconst userReducer = (state = [], action) => {\n  switch(action.type) {\n    // case 'FETCHED_SESSIONS':\n    //   return action.payload\n    // case 'POST_SESSION':\n    //   return {...state, sessions:[...state.sessions, action.payload]}\n    // case 'UPDATED_SESSION':\n    //   let originalSession = state.sessions.find(session => session.id === action.payload.id)\n    //   let index = state.sessions.indexOf(originalSession)\n    //   let sessionCopy = [...state.sessions]\n    //   sessionCopy.splice(index, 1, action.payload)\n    //   return {...state, sessions:[...sessionCopy]}\n    // case 'DELETED_SESSION':\n    //   originalSession = state.sessions.find(session => session.id === action.payload.id)\n    //   index = state.sessions.indexOf(originalSession)\n    //   sessionCopy = [...state.sessions]\n    //   sessionCopy.splice(index, 1)\n    //   return {...state, sessions:[...sessionCopy]}\n    // case 'UPDATED_USER_BALANCE':\n    //   return {...state, balance: action.payload.balance}\n    // default:\n    //   return state\n  }\n}\n\nconst userListReducer = (state = [], action) => {\n  switch(action.type) {\n    case 'FETCHED_USER_LIST':\n      return action.payload\n    default:\n      return state\n  }\n}\n\nconst currentUserReducer = (state = [], action) => {\n  switch(action.type) {\n    case 'LOGGED_IN':\n      return action.payload.user\n    default:\n      return state\n  }\n}\n\nconst sessionsReducer = (state = [], action) => {\n  switch(action.type) {\n    case 'FETCHED_SESSIONS':\n      return action.payload\n    default:\n      return state\n  }\n}\n\nconst balanceReducer = (state = {}, action) => {\n  switch(action.type) {\n    case 'FETCHED_USER_BALANCES':\n      debugger\n    default:\n      return state\n  }\n}\n\nconst rootReducer = combineReducers({\n  currentUser: currentUserReducer,\n  sessions: sessionsReducer,\n  balance: balanceReducer,\n  // user: userReducer,\n  // userList: userListReducer,\n});\n\nexport default rootReducer;\n"]},"metadata":{},"sourceType":"module"}