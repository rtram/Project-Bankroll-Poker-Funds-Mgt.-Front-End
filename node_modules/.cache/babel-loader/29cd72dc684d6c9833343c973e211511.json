{"ast":null,"code":"import _defineProperty from \"/Users/flatironschool/Development/module_5/poker_app_frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/flatironschool/Development/module_5/poker_app_frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/flatironschool/Development/module_5/poker_app_frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/flatironschool/Development/module_5/poker_app_frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/flatironschool/Development/module_5/poker_app_frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/flatironschool/Development/module_5/poker_app_frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/flatironschool/Development/module_5/poker_app_frontend/src/react/transfer/profilePage/PaymentConfirmation.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { updatingUserBalance, updatingRecipientBalance } from '../../../redux/actions/balances.js';\nimport { postingTransaction } from '../../../redux/actions/users.js';\nimport { Button, Modal, Input } from 'semantic-ui-react';\n\nvar PaymentConfirmation =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PaymentConfirmation, _Component);\n\n  function PaymentConfirmation() {\n    var _this;\n\n    _classCallCheck(this, PaymentConfirmation);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PaymentConfirmation).call(this));\n\n    _this.resetState = function () {\n      _this.setState({\n        amount: 0,\n        open: false\n      });\n    };\n\n    _this.handlePayment = function () {\n      var currentUserBalanceObject = {\n        id: _this.props.currentUser,\n        balance: _this.calculateTotal()\n      };\n      var recipientBalance = parseFloat(_this.props.selectedProfile.balance) + parseFloat(_this.state.amount);\n      var recipientBalanceObject = {\n        id: _this.props.selectedProfile.id,\n        balance: recipientBalance\n      };\n\n      _this.props.updatingUserBalance(currentUserBalanceObject);\n\n      _this.props.updatingRecipientBalance(recipientBalanceObject);\n\n      var transactionObject = {\n        sender_id: _this.props.currentUser,\n        recipient_id: _this.props.selectedProfile.id,\n        amount: _this.state.amount,\n        date: Date.now()\n      };\n\n      _this.props.postingTransaction(transactionObject);\n\n      _this.resetState();\n\n      _this.handleToggle();\n    };\n\n    _this.handleToggle = function () {\n      _this.setState({\n        open: !_this.state.open\n      });\n    };\n\n    _this.handleChange = function (event) {\n      _this.setState(_defineProperty({}, event.target.name, event.target.value));\n    };\n\n    _this.calculateTotal = function () {\n      var balance = _this.props.balance;\n\n      if (isNaN(balance)) {\n        balance = 0;\n      }\n\n      var payment = _this.state.amount;\n\n      if (isNaN(payment) || payment === '') {\n        payment = 0;\n      }\n\n      var newTotal = parseFloat(balance) - parseFloat(payment);\n      return newTotal;\n    };\n\n    _this.state = {\n      amount: 0,\n      open: false\n    };\n    return _this;\n  }\n\n  _createClass(PaymentConfirmation, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Modal, {\n        open: this.state.open,\n        size: \"large\",\n        trigger: React.createElement(Button, {\n          onClick: this.handleToggle,\n          color: \"blue\",\n          style: {\n            width: '200px'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82\n          },\n          __self: this\n        }, \"Pay\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, React.createElement(Modal.Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, \"Pay \", this.props.selectedProfile.first_name), React.createElement(Modal.Content, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(Input, {\n        onChange: this.handleChange,\n        action: {\n          color: 'green',\n          labelPosition: 'left',\n          icon: 'dollar',\n          content: 'Amount'\n        },\n        actionPosition: \"left\",\n        placeholder: \"$\",\n        type: \"number\",\n        min: \"0.01\",\n        step: \"0.01\",\n        name: \"amount\",\n        value: this.state.amount,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }), \"Paying \", this.props.selectedProfile.first_name, \" $\", this.state.amount, \" will bring Your Account Balance to $\", this.calculateTotal()), React.createElement(Modal.Actions, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"green\",\n        onClick: this.handlePayment,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, \"Pay\"), React.createElement(Button, {\n        color: \"grey\",\n        onClick: this.handleToggle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, \"Cancel\")));\n    }\n  }]);\n\n  return PaymentConfirmation;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    currentUser: state.currentUser,\n    balance: state.balance,\n    selectedProfile: state.selectedProfile[0]\n  };\n};\n\nexport default connect(mapStateToProps, {\n  updatingUserBalance: updatingUserBalance,\n  updatingRecipientBalance: updatingRecipientBalance,\n  postingTransaction: postingTransaction\n})(PaymentConfirmation);","map":{"version":3,"sources":["/Users/flatironschool/Development/module_5/poker_app_frontend/src/react/transfer/profilePage/PaymentConfirmation.js"],"names":["React","Component","connect","updatingUserBalance","updatingRecipientBalance","postingTransaction","Button","Modal","Input","PaymentConfirmation","resetState","setState","amount","open","handlePayment","currentUserBalanceObject","id","props","currentUser","balance","calculateTotal","recipientBalance","parseFloat","selectedProfile","state","recipientBalanceObject","transactionObject","sender_id","recipient_id","date","Date","now","handleToggle","handleChange","event","target","name","value","isNaN","payment","newTotal","width","first_name","color","labelPosition","icon","content","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { updatingUserBalance, updatingRecipientBalance } from '../../../redux/actions/balances.js'\nimport { postingTransaction } from '../../../redux/actions/users.js'\n\nimport { Button, Modal, Input } from 'semantic-ui-react'\n\nclass PaymentConfirmation extends Component {\n  constructor() {\n    super()\n    this.state = {\n      amount: 0,\n      open:false\n    }\n  }\n\n  resetState = () => {\n    this.setState({\n      amount: 0,\n      open: false\n    })\n  }\n\n  handlePayment = () => {\n    let currentUserBalanceObject = {\n      id: this.props.currentUser,\n      balance: this.calculateTotal()\n    }\n\n    let recipientBalance = parseFloat(this.props.selectedProfile.balance) + parseFloat(this.state.amount)\n\n    let recipientBalanceObject = {\n      id: this.props.selectedProfile.id,\n      balance: recipientBalance\n    }\n\n    this.props.updatingUserBalance(currentUserBalanceObject)\n    this.props.updatingRecipientBalance(recipientBalanceObject)\n\n    let transactionObject = {\n      sender_id: this.props.currentUser,\n      recipient_id: this.props.selectedProfile.id,\n      amount: this.state.amount,\n      date: Date.now()\n    }\n    \n    this.props.postingTransaction(transactionObject)\n\n    this.resetState()\n    this.handleToggle()\n  }\n\n  handleToggle = () => {\n    this.setState({\n      open: !this.state.open\n    })\n  }\n\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    })\n  }\n\n  // RETURNS UPDATED BALANCE AS THE DIFF OF OLD BALANCE - WITHDRAWAL\n  calculateTotal = () => {\n    let balance = this.props.balance\n    if (isNaN(balance)) {\n      balance = 0\n    }\n    let payment = this.state.amount\n    if (isNaN(payment) || payment === '') {\n      payment = 0\n    }\n    let newTotal = parseFloat(balance) - parseFloat(payment)\n    return newTotal\n  }\n\n  render() {\n    return(\n      <Modal open={this.state.open} size='large' trigger={\n        <Button onClick={this.handleToggle}color='blue' style={{width:'200px'}}>Pay</Button>\n      }>\n        <Modal.Header>Pay {this.props.selectedProfile.first_name}</Modal.Header>\n        <Modal.Content>\n          <Input\n            onChange={this.handleChange}\n            action={{ color: 'green', labelPosition: 'left', icon: 'dollar', content: 'Amount' }}\n            actionPosition='left'\n            placeholder='$'\n            type='number'\n            min=\"0.01\"\n            step=\"0.01\"\n            name='amount'\n            value={this.state.amount}\n          />\n          Paying {this.props.selectedProfile.first_name} ${this.state.amount} will bring Your Account Balance to ${this.calculateTotal()}\n        </Modal.Content>\n        <Modal.Actions>\n          <Button color='green' onClick={this.handlePayment}>Pay</Button>\n          <Button color='grey' onClick={this.handleToggle}>Cancel</Button>\n        </Modal.Actions>\n      </Modal>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    currentUser: state.currentUser,\n    balance: state.balance,\n    selectedProfile: state.selectedProfile[0]\n  }\n}\n\nexport default connect(mapStateToProps, { updatingUserBalance, updatingRecipientBalance, postingTransaction })(PaymentConfirmation)\n"]},"metadata":{},"sourceType":"module"}