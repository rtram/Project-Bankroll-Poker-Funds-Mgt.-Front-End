{"ast":null,"code":"var URL = 'http://localhost:3001/api/v1/sessions';\n\nvar loading = function loading() {\n  return {\n    type: \"LOADING\"\n  };\n};\n\nvar fetchedSessions = function fetchedSessions(data) {\n  return {\n    type: \"FETCHED_SESSIONS\",\n    payload: data\n  };\n};\n\nvar fetchingSessions = function fetchingSessions(user_id) {\n  var token = localStorage.getItem('token');\n  return function (dispatch) {\n    fetch(\"\".concat(URL, \"/\").concat(user_id), {\n      method: 'GET',\n      headers: {\n        \"Authentication\": \"Bearer \".concat(token)\n      }\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      dispatch(fetchedSessions(data));\n    });\n  };\n};\n\nvar postedSession = function postedSession(data) {\n  debugger;\n  return {\n    type: 'POST_SESSION',\n    payload: data\n  };\n};\n\nvar displaySessionErrors = function displaySessionErrors(data) {\n  return {\n    type: 'DISPLAY_SESSION_ERRORS',\n    payload: data\n  };\n};\n\nvar postingSession = function postingSession(sessionObject) {\n  var token = localStorage.getItem('token');\n  return function (dispatch) {\n    fetch(URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        \"Authentication\": \"Bearer \".concat(token)\n      },\n      body: JSON.stringify(sessionObject)\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      if (data.errors) {\n        dispatch(displaySessionErrors(data.errors));\n      } else {\n        dispatch(postedSession(data));\n      }\n    });\n  };\n};\n\nvar updatedSession = function updatedSession(data) {\n  return {\n    type: 'UPDATED_SESSION',\n    payload: data\n  };\n};\n\nvar updatingSession = function updatingSession(sessionObject) {\n  var token = localStorage.getItem('token');\n  return function (dispatch) {\n    fetch(\"\".concat(URL, \"/\").concat(sessionObject.id), {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authentication\": \"Bearer \".concat(token)\n      },\n      body: JSON.stringify(sessionObject)\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      return dispatch(updatedSession(data));\n    });\n  };\n};\n\nvar deletedSession = function deletedSession(data) {\n  return {\n    type: 'DELETED_SESSION',\n    payload: data\n  };\n};\n\nvar deletingSession = function deletingSession(sessionObject) {\n  var token = localStorage.getItem('token');\n  return function (dispatch) {\n    dispatch(deletedSession(sessionObject));\n    fetch(\"\".concat(URL, \"/\").concat(sessionObject.id), {\n      method: \"DELETE\",\n      headers: {\n        \"Authentication\": \"Bearer \".concat(token)\n      }\n    });\n  };\n};\n\nexport { postingSession, updatingSession, deletingSession, fetchingSessions };","map":{"version":3,"sources":["/Users/flatironschool/Development/module_5/poker_app_frontend/src/redux/actions/sessions.js"],"names":["URL","loading","type","fetchedSessions","data","payload","fetchingSessions","user_id","token","localStorage","getItem","dispatch","fetch","method","headers","then","res","json","postedSession","displaySessionErrors","postingSession","sessionObject","body","JSON","stringify","errors","updatedSession","updatingSession","id","deletedSession","deletingSession"],"mappings":"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","sourcesContent":["const URL = 'http://localhost:3001/api/v1/sessions'\n\nconst loading = () => {\n  return {type: \"LOADING\"}\n}\n\nconst fetchedSessions = (data) => {\n  return {\n    type:\"FETCHED_SESSIONS\",\n    payload: data}\n}\n\nconst fetchingSessions = (user_id) => {\n  let token = localStorage.getItem('token')\n  return (dispatch) => {\n    fetch(`${URL}/${user_id}`, {\n      method: 'GET',\n      headers: {\n        \"Authentication\" : `Bearer ${token}`\n      }\n    })\n    .then(res => res.json())\n    .then(data => {\n      dispatch(fetchedSessions(data))\n    })\n  }\n}\n\nconst postedSession = data => {\n  debugger\n  return {\n    type: 'POST_SESSION',\n    payload: data\n  };\n}\n\nconst displaySessionErrors = data => {\n  return {\n    type: 'DISPLAY_SESSION_ERRORS',\n    payload: data\n  }\n}\n\nconst postingSession = sessionObject => {\n  let token = localStorage.getItem('token')\n  return dispatch => {\n    fetch(URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        \"Authentication\" : `Bearer ${token}`\n      },\n      body: JSON.stringify(sessionObject)\n    })\n      .then(res => res.json())\n      .then(data => {\n        if (data.errors) {\n          dispatch(displaySessionErrors(data.errors))\n        } else {\n          dispatch(postedSession(data))\n        }\n      }\n    )\n  }\n}\n\nconst updatedSession = data => {\n  return {\n    type: 'UPDATED_SESSION',\n    payload: data\n  };\n}\n\nconst updatingSession = sessionObject => {\n  let token = localStorage.getItem('token')\n  return dispatch => {\n    fetch(`${URL}/${sessionObject.id}`, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authentication\" : `Bearer ${token}`\n      },\n      body: JSON.stringify(sessionObject)\n    })\n      .then(res => res.json())\n      .then(data => dispatch(updatedSession(data)))\n  }\n}\n\nconst deletedSession = data => {\n  return {\n    type: 'DELETED_SESSION',\n    payload: data\n  };\n}\n\nconst deletingSession = sessionObject => {\n  let token = localStorage.getItem('token')\n  return dispatch => {\n    dispatch(deletedSession(sessionObject))\n    fetch(`${URL}/${sessionObject.id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Authentication\" : `Bearer ${token}`\n      }\n    })\n  }\n}\n\nexport { postingSession, updatingSession, deletingSession, fetchingSessions };\n"]},"metadata":{},"sourceType":"module"}