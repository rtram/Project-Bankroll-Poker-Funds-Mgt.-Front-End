{"ast":null,"code":"import _toConsumableArray from \"/Users/flatironschool/Development/module_5/poker_app_frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { combineReducers } from 'redux'; // const userReducer = (state = [], action) => {\n//   switch(action.type) {\n//     case 'FETCHED_SESSIONS':\n//       return action.payload\n//     case 'POST_SESSION':\n//       return {...state, sessions:[...state.sessions, action.payload]}\n//     case 'DELETED_SESSION':\n//       originalSession = state.sessions.find(session => session.id === action.payload.id)\n//       index = state.sessions.indexOf(originalSession)\n//       sessionCopy = [...state.sessions]\n//       sessionCopy.splice(index, 1)\n//       return {...state, sessions:[...sessionCopy]}\n//     case 'UPDATED_USER_BALANCE':\n//       return {...state, balance: action.payload.balance}\n//     default:\n//       return state\n//   }\n// }\n\nvar userListReducer = function userListReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'FETCHED_USER_LIST':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nvar currentUserReducer = function currentUserReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'LOGGED_IN':\n      return action.payload.user;\n\n    default:\n      return state;\n  }\n};\n\nvar sessionsReducer = function sessionsReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'FETCHED_SESSIONS':\n      return action.payload;\n\n    case 'UPDATED_SESSION':\n      debugger;\n      var originalSession = state.find(function (session) {\n        return session.id === action.payload.id;\n      });\n      var index = state.indexOf(originalSession);\n\n      var sessionCopy = _toConsumableArray(state);\n\n      sessionCopy.splice(index, 1, action.payload);\n      return sessionCopy;\n\n    default:\n      return state;\n  }\n};\n\nvar balanceReducer = function balanceReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'FETCHED_USER_DATA':\n      return action.payload.balance;\n\n    default:\n      return state;\n  }\n};\n\nvar userReducer = function userReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'FETCHED_USER_DATA':\n      var userObject = {\n        username: action.payload.username,\n        first_name: action.payload.first_name,\n        last_name: action.payload.last_name\n      };\n      return userObject;\n\n    default:\n      return state;\n  }\n};\n\nvar sentTransactionsReducer = function sentTransactionsReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'FETCHED_USER_DATA':\n      return action.payload.sent_transactions;\n\n    default:\n      return state;\n  }\n};\n\nvar receivedTransactionsReducer = function receivedTransactionsReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'FETCHED_USER_DATA':\n      return action.payload.received_transactions;\n\n    default:\n      return state;\n  }\n};\n\nvar rootReducer = combineReducers({\n  currentUser: currentUserReducer,\n  sessions: sessionsReducer,\n  balance: balanceReducer,\n  user: userReducer,\n  sent_transactions: sentTransactionsReducer,\n  received_transactions: receivedTransactionsReducer // userList: userListReducer,\n\n});\nexport default rootReducer;","map":{"version":3,"sources":["/Users/flatironschool/Development/module_5/poker_app_frontend/src/redux/reducers/index.js"],"names":["combineReducers","userListReducer","state","action","type","payload","currentUserReducer","user","sessionsReducer","originalSession","find","session","id","index","indexOf","sessionCopy","splice","balanceReducer","balance","userReducer","userObject","username","first_name","last_name","sentTransactionsReducer","sent_transactions","receivedTransactionsReducer","received_transactions","rootReducer","currentUser","sessions"],"mappings":"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","sourcesContent":["import { combineReducers } from 'redux'\n\n// const userReducer = (state = [], action) => {\n//   switch(action.type) {\n//     case 'FETCHED_SESSIONS':\n//       return action.payload\n//     case 'POST_SESSION':\n//       return {...state, sessions:[...state.sessions, action.payload]}\n\n//     case 'DELETED_SESSION':\n//       originalSession = state.sessions.find(session => session.id === action.payload.id)\n//       index = state.sessions.indexOf(originalSession)\n//       sessionCopy = [...state.sessions]\n//       sessionCopy.splice(index, 1)\n//       return {...state, sessions:[...sessionCopy]}\n//     case 'UPDATED_USER_BALANCE':\n//       return {...state, balance: action.payload.balance}\n//     default:\n//       return state\n//   }\n// }\n\nconst userListReducer = (state = [], action) => {\n  switch(action.type) {\n    case 'FETCHED_USER_LIST':\n      return action.payload\n    default:\n      return state\n  }\n}\n\nconst currentUserReducer = (state = [], action) => {\n  switch(action.type) {\n    case 'LOGGED_IN':\n      return action.payload.user\n    default:\n      return state\n  }\n}\n\nconst sessionsReducer = (state = [], action) => {\n  switch(action.type) {\n    case 'FETCHED_SESSIONS':\n      return action.payload\n    case 'UPDATED_SESSION':\n    debugger\n      let originalSession = state.find(session => session.id === action.payload.id)\n      let index = state.indexOf(originalSession)\n      let sessionCopy = [...state]\n      sessionCopy.splice(index, 1, action.payload)\n      return sessionCopy\n    default:\n      return state\n  }\n}\n\nconst balanceReducer = (state = 0, action) => {\n  switch(action.type) {\n    case 'FETCHED_USER_DATA':\n      return action.payload.balance\n    default:\n      return state\n  }\n}\n\nconst userReducer = (state = {}, action) => {\n  switch(action.type) {\n    case 'FETCHED_USER_DATA':\n      let userObject = {\n        username: action.payload.username,\n        first_name: action.payload.first_name,\n        last_name: action.payload.last_name\n      }\n      return userObject\n    default:\n      return state\n  }\n}\n\nconst sentTransactionsReducer = (state = [], action) => {\n  switch(action.type) {\n    case 'FETCHED_USER_DATA':\n      return action.payload.sent_transactions\n    default:\n      return state\n  }\n}\n\nconst receivedTransactionsReducer = (state = [], action) => {\n  switch(action.type) {\n    case 'FETCHED_USER_DATA':\n      return action.payload.received_transactions\n    default:\n      return state\n  }\n}\n\nconst rootReducer = combineReducers({\n  currentUser: currentUserReducer,\n  sessions: sessionsReducer,\n  balance: balanceReducer,\n  user: userReducer,\n  sent_transactions: sentTransactionsReducer,\n  received_transactions: receivedTransactionsReducer\n  // userList: userListReducer,\n});\n\nexport default rootReducer;\n"]},"metadata":{},"sourceType":"module"}