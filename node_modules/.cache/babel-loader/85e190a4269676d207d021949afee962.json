{"ast":null,"code":"import _classCallCheck from \"/Users/flatironschool/Development/module_5/poker_app_frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/flatironschool/Development/module_5/poker_app_frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/flatironschool/Development/module_5/poker_app_frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/flatironschool/Development/module_5/poker_app_frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/flatironschool/Development/module_5/poker_app_frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/flatironschool/Development/module_5/poker_app_frontend/src/react/transfer/transfercontainer/Transfer.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Container, Divider, Header, Icon, Button, Grid, Label } from 'semantic-ui-react';\nimport { postingLike, deletingLike } from '../../../redux/actions/like';\n\nvar Transfer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Transfer, _Component);\n\n  function Transfer() {\n    var _this;\n\n    _classCallCheck(this, Transfer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Transfer).call(this));\n\n    _this.fullNameConverter = function (object, type) {\n      return object[type].first_name + ' ' + object[type].last_name;\n    };\n\n    _this.handleClick = function () {\n      var currentUserId = parseInt(localStorage.getItem('currentUser'));\n      var userIdArray; // RETURNS USER IDS THAT HAVE LIKED TRANSACTION\n\n      if (_this.state.likes.length > 0) {\n        userIdArray = _this.state.likes.map(function (transferObject) {\n          return transferObject.user_id;\n        });\n      }\n\n      var copyState = _this.state.likes;\n\n      if (_this.state.likes.length > 0 && userIdArray.includes(currentUserId)) {\n        var index = userIdArray.indexOf(currentUserId);\n        var originalLike = _this.state.likes[index];\n\n        if ('id' in originalLike) {\n          _this.props.deletingLike(originalLike);\n        }\n\n        copyState.splice(index, 1);\n\n        _this.setState({\n          likes: copyState,\n          likeCount: _this.state.likeCount - 1\n        });\n      } else {\n        var likeObject = {\n          transaction_id: _this.props.transfer.id,\n          user_id: currentUserId,\n          first_name: _this.props.user.first_name,\n          last_name: _this.props.user.last_name\n        };\n\n        _this.props.postingLike(likeObject);\n\n        if (copyState.length === 0) {\n          _this.setState({\n            likes: [likeObject],\n            likeCount: _this.state.likeCount + 1\n          });\n        } else {\n          copyState.push(likeObject);\n\n          _this.setState({\n            likes: copyState,\n            likeCount: _this.state.likeCount + 1\n          });\n        }\n      }\n    };\n\n    _this.shortenedLikeList = function () {\n      return _this.state.likes.slice(0, 3);\n    };\n\n    _this.state = {\n      likes: [],\n      likeCount: 0\n    };\n    return _this;\n  }\n\n  _createClass(Transfer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var likeArray = this.props.transfer.likes;\n      this.setState({\n        likes: likeArray,\n        likeCount: likeArray.length\n      });\n    } // RETURNS OBJECT SENDER/RECIPIENT'S FULL NAME STRING\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(Header, {\n        as: \"h4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, this.fullNameConverter(this.props.transfer, 'sender'), \" paid \", this.fullNameConverter(this.props.transfer, 'recipient'), \" $\", this.props.transfer.amount, \" on \", this.props.transfer.date), React.createElement(Grid, {\n        columns: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(Grid.Column, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"white\",\n        onClick: this.handleClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        name: \"like\",\n        color: \"red\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }), this.state.likeCount)), React.createElement(Grid.Column, {\n        width: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(Container, {\n        style: {},\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, this.shortenedLikeList().map(function (userObject) {\n        return React.createElement(Label, {\n          color: \"green\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106\n          },\n          __self: this\n        }, userObject.first_name + ' ' + userObject.last_name);\n      }), this.state.likeCount > 3 ? React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, \"...\") : null))), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, this.props.transfer.message), React.createElement(Divider, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Transfer;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    user: state.user\n  };\n};\n\nexport default connect(mapStateToProps, {\n  postingLike: postingLike,\n  deletingLike: deletingLike\n})(Transfer);","map":{"version":3,"sources":["/Users/flatironschool/Development/module_5/poker_app_frontend/src/react/transfer/transfercontainer/Transfer.js"],"names":["React","Component","connect","Container","Divider","Header","Icon","Button","Grid","Label","postingLike","deletingLike","Transfer","fullNameConverter","object","type","first_name","last_name","handleClick","currentUserId","parseInt","localStorage","getItem","userIdArray","state","likes","length","map","transferObject","user_id","copyState","includes","index","indexOf","originalLike","props","splice","setState","likeCount","likeObject","transaction_id","transfer","id","user","push","shortenedLikeList","slice","likeArray","amount","date","userObject","message","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Container, Divider, Header, Icon, Button, Grid, Label } from 'semantic-ui-react'\nimport { postingLike, deletingLike } from '../../../redux/actions/like'\n\n\n\nclass Transfer extends Component {\n  constructor() {\n    super()\n    this.state={\n      likes:[],\n      likeCount: 0\n    }\n  }\n\n  componentDidMount() {\n    let likeArray = this.props.transfer.likes\n\n    this.setState({\n      likes: likeArray,\n      likeCount: likeArray.length\n    })\n  }\n\n  // RETURNS OBJECT SENDER/RECIPIENT'S FULL NAME STRING\n  fullNameConverter = (object, type) => {\n    return object[type].first_name + ' ' + object[type].last_name\n  }\n\n  // IN PROGRESS\n  // FUNCTION ALLOWS USER A MAX OF 1 CLICK PER TRANSACTION\n  // AS IS, THE FUNCTION PERMITS MULTIPLE LIKES IF THE USER CLICKS MULTIPLE TIMES BEFORE THE INITIAL LIKE PERSISTS.\n  handleClick = () => {\n    let currentUserId = parseInt(localStorage.getItem('currentUser'))\n    let userIdArray;\n\n    // RETURNS USER IDS THAT HAVE LIKED TRANSACTION\n    if (this.state.likes.length > 0) {\n      userIdArray = this.state.likes.map(transferObject => transferObject.user_id)\n    }\n\n    let copyState = this.state.likes\n\n    if (this.state.likes.length > 0 && userIdArray.includes(currentUserId)) {\n      let index = userIdArray.indexOf(currentUserId)\n      let originalLike = this.state.likes[index]\n\n      if ('id' in originalLike) {\n        this.props.deletingLike(originalLike)\n      }\n      copyState.splice(index, 1)\n      this.setState({\n        likes: copyState,\n        likeCount: this.state.likeCount - 1,\n      })\n    } else {\n      let likeObject = {\n        transaction_id: this.props.transfer.id,\n        user_id: currentUserId,\n        first_name: this.props.user.first_name,\n        last_name: this.props.user.last_name\n      }\n      this.props.postingLike(likeObject)\n      if (copyState.length === 0 ) {\n        this.setState({\n          likes: [likeObject],\n          likeCount: this.state.likeCount + 1,\n        })\n      } else {\n        copyState.push(likeObject)\n        this.setState({\n          likes: copyState,\n          likeCount: this.state.likeCount + 1,\n        })\n      }\n    }\n  }\n\n  shortenedLikeList = () => {\n    return this.state.likes.slice(0, 3)\n  }\n\n  render() {\n    return(\n      <Container>\n\n        <Header as='h4'>\n          {this.fullNameConverter(this.props.transfer, 'sender')} paid {this.fullNameConverter(this.props.transfer, 'recipient')} ${this.props.transfer.amount} on {this.props.transfer.date}\n        </Header>\n\n        <Grid columns={2}>\n          <Grid.Column >\n            <Button color='white' onClick={this.handleClick}>\n              <Icon name='like' color='red'/>\n              {this.state.likeCount}\n            </Button>\n          </Grid.Column>\n          <Grid.Column width={12}>\n            <Container\n              style={{\n\n              }}\n            >\n              {this.shortenedLikeList().map(userObject => (\n                <Label color='green'>\n                  {userObject.first_name + ' ' +userObject.last_name}\n                </Label>\n              ))}\n              {this.state.likeCount > 3 ? <p>...</p>: null}\n            </Container>\n          </Grid.Column>\n        </Grid>\n\n        <p>{this.props.transfer.message}</p>\n\n        <Divider />\n      </Container>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.user\n  }\n}\n\nexport default connect(mapStateToProps, { postingLike, deletingLike })(Transfer)\n"]},"metadata":{},"sourceType":"module"}