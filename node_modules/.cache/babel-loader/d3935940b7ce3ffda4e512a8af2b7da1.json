{"ast":null,"code":"var URL = 'http://localhost:3001/api/v1/login%20';\n\nvar loggedIn = function loggedIn(data) {\n  localStorage.setItem('token', data.jwt);\n  localStorage.setItem('currentUser', data.user);\n  fetchingUserInbox(data.user);\n  return {\n    type: \"LOGGED_IN\",\n    payload: data\n  };\n};\n\nvar displayLoginError = function displayLoginError(data) {\n  return {\n    type: 'DISPLAY_LOGIN_ERROR',\n    payload: data\n  };\n};\n\nvar loggingIn = function loggingIn(userObject) {\n  return function (dispatch) {\n    fetch(URL, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(userObject)\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      if (data.message) {\n        dispatch(displayLoginError(data));\n      } else {\n        dispatch(loggedIn(data));\n      }\n    });\n  };\n};\n\nvar fetchedUserInbox = function fetchedUserInbox(data) {\n  debugger;\n  return {\n    type: \"FETCHED_USER_DATA\",\n    payload: data\n  };\n};\n\nvar fetchingUserInbox = function fetchingUserInbox(user_id) {\n  var token = localStorage.getItem('token');\n  return function (dispatch) {\n    fetch(\"http://localhost:3001/api/v1/users/\".concat(user_id), {\n      method: 'GET',\n      headers: {\n        \"Authentication\": \"Bearer \".concat(token),\n        \"userInbox\": true\n      }\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      dispatch(fetchedUserInbox(data));\n    });\n  };\n};\n\nvar userLogout = function userLogout() {\n  return {\n    type: 'USER_LOGOUT'\n  };\n};\n\nexport { loggingIn, userLogout };","map":{"version":3,"sources":["/Users/flatironschool/Development/module_5/poker_app_frontend/src/redux/actions/login.js"],"names":["URL","loggedIn","data","localStorage","setItem","jwt","user","fetchingUserInbox","type","payload","displayLoginError","loggingIn","userObject","dispatch","fetch","method","headers","body","JSON","stringify","then","res","json","message","fetchedUserInbox","user_id","token","getItem","userLogout"],"mappings":"AAAA,IAAMA,GAAG,GAAG,uCAAZ;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,IAAD,EAAU;AACzBC,EAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BF,IAAI,CAACG,GAAnC;AACAF,EAAAA,YAAY,CAACC,OAAb,CAAqB,aAArB,EAAoCF,IAAI,CAACI,IAAzC;AACAC,EAAAA,iBAAiB,CAACL,IAAI,CAACI,IAAN,CAAjB;AACA,SAAO;AACLE,IAAAA,IAAI,EAAC,WADA;AAELC,IAAAA,OAAO,EAAEP;AAFJ,GAAP;AAID,CARD;;AAUA,IAAMQ,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAR,IAAI,EAAI;AAChC,SAAO;AACLM,IAAAA,IAAI,EAAC,qBADA;AAELC,IAAAA,OAAO,EAAEP;AAFJ,GAAP;AAID,CALD;;AAOA,IAAMS,SAAS,GAAG,SAAZA,SAAY,CAACC,UAAD,EAAgB;AAChC,SAAO,UAAAC,QAAQ,EAAI;AACjBC,IAAAA,KAAK,CAACd,GAAD,EAAM;AACTe,MAAAA,MAAM,EAAE,MADC;AAETC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFA;AAKTC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,UAAf;AALG,KAAN,CAAL,CAOGQ,IAPH,CAOQ,UAAAC,GAAG;AAAA,aAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,KAPX,EAQGF,IARH,CAQQ,UAAAlB,IAAI,EAAI;AACZ,UAAIA,IAAI,CAACqB,OAAT,EAAkB;AAChBV,QAAAA,QAAQ,CAACH,iBAAiB,CAACR,IAAD,CAAlB,CAAR;AACD,OAFD,MAEO;AACLW,QAAAA,QAAQ,CAACZ,QAAQ,CAACC,IAAD,CAAT,CAAR;AACD;AACF,KAdH;AAgBD,GAjBD;AAkBD,CAnBD;;AAqBA,IAAMsB,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACtB,IAAD,EAAU;AACjC;AACA,SAAO;AACLM,IAAAA,IAAI,EAAC,mBADA;AAELC,IAAAA,OAAO,EAAEP;AAFJ,GAAP;AAID,CAND;;AAQA,IAAMK,iBAAiB,GAAG,SAApBA,iBAAoB,CAACkB,OAAD,EAAa;AACrC,MAAIC,KAAK,GAAGvB,YAAY,CAACwB,OAAb,CAAqB,OAArB,CAAZ;AACA,SAAO,UAACd,QAAD,EAAc;AACnBC,IAAAA,KAAK,8CAAuCW,OAAvC,GAAkD;AACrDV,MAAAA,MAAM,EAAE,KAD6C;AAErDC,MAAAA,OAAO,EAAE;AACP,2CAA6BU,KAA7B,CADO;AAEP,qBAAa;AAFN;AAF4C,KAAlD,CAAL,CAOCN,IAPD,CAOM,UAAAC,GAAG;AAAA,aAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,KAPT,EAQCF,IARD,CAQM,UAAAlB,IAAI,EAAI;AACZW,MAAAA,QAAQ,CAACW,gBAAgB,CAACtB,IAAD,CAAjB,CAAR;AACD,KAVD;AAWD,GAZD;AAaD,CAfD;;AAiBA,IAAM0B,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvB,SAAO;AACLpB,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJD;;AAMA,SAASG,SAAT,EAAoBiB,UAApB","sourcesContent":["const URL = 'http://localhost:3001/api/v1/login%20'\n\nconst loggedIn = (data) => {\n  localStorage.setItem('token', data.jwt)\n  localStorage.setItem('currentUser', data.user)\n  fetchingUserInbox(data.user)\n  return {\n    type:\"LOGGED_IN\",\n    payload: data\n  }\n}\n\nconst displayLoginError = data => {\n  return {\n    type:'DISPLAY_LOGIN_ERROR',\n    payload: data\n  }\n}\n\nconst loggingIn = (userObject) => {\n  return dispatch => {\n    fetch(URL, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(userObject)\n    })\n      .then(res => res.json())\n      .then(data => {\n        if (data.message) {\n          dispatch(displayLoginError(data))\n        } else {\n          dispatch(loggedIn(data))\n        }\n      }\n    )\n  }\n}\n\nconst fetchedUserInbox = (data) => {\n  debugger\n  return {\n    type:\"FETCHED_USER_DATA\",\n    payload: data\n  }\n}\n\nconst fetchingUserInbox = (user_id) => {\n  let token = localStorage.getItem('token')\n  return (dispatch) => {\n    fetch(`http://localhost:3001/api/v1/users/${user_id}`, {\n      method: 'GET',\n      headers: {\n        \"Authentication\" : `Bearer ${token}`,\n        \"userInbox\": true\n      }\n    })\n    .then(res => res.json())\n    .then(data => {\n      dispatch(fetchedUserInbox(data))\n    })\n  }\n}\n\nconst userLogout = () => {\n  return {\n    type: 'USER_LOGOUT'\n  }\n}\n\nexport { loggingIn, userLogout };\n"]},"metadata":{},"sourceType":"module"}