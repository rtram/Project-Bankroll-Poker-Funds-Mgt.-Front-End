{"ast":null,"code":"import _classCallCheck from \"/Users/flatironschool/Development/module_5/poker_app_frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/flatironschool/Development/module_5/poker_app_frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/flatironschool/Development/module_5/poker_app_frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/flatironschool/Development/module_5/poker_app_frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/flatironschool/Development/module_5/poker_app_frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/flatironschool/Development/module_5/poker_app_frontend/src/react/homepage/dashboard.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './dashboard.css';\nimport { fetchingUserData } from '../../redux/actions/users.js';\nimport WinningPercentage from './winningpercentage';\nimport OverTime from './overtime';\n\nvar Dashboard =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Dashboard, _Component);\n\n  function Dashboard() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Dashboard);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Dashboard)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.winLossPercentage = function () {\n      var winCount = 0;\n      var lossCount = 0;\n\n      for (var i = 0; i < _this.props.sessions.length; i++) {\n        if (_this.props.sessions[i].amount > 0) {\n          winCount++;\n        } else {\n          lossCount++;\n        }\n      }\n\n      var winningPercentageData = [winCount, lossCount];\n      return winningPercentageData;\n    };\n\n    _this.createOverTimeLabels = function () {\n      var moment = require('moment');\n\n      var overTimeLabels = {};\n      var last30DayArray = [];\n\n      for (var i = 0; i < 30; i++) {\n        var day = moment().subtract(i, 'days').format('l');\n        last30DayArray.push(day);\n      }\n\n      var last12WeekArray = [];\n\n      for (var _i = 0; _i < 12; _i++) {\n        var week = moment().subtract(_i, 'weeks').format('l');\n        last12WeekArray.push(week);\n      }\n\n      var last12MonthArray = [];\n\n      for (var _i2 = 0; _i2 < 12; _i2++) {\n        var month = moment().subtract(_i2, 'months').format('l');\n        last12MonthArray.push(month);\n      }\n\n      overTimeLabels = {\n        '30days': last30DayArray,\n        '12weeks': last12WeekArray,\n        '12months': last12MonthArray\n      };\n      return overTimeLabels;\n    };\n\n    return _this;\n  }\n\n  _createClass(Dashboard, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.fetchingUserData();\n    } // RETURNS AN ARRAY OF WINNING SESSION COUNT AND LOSING SESSIONS COUNT\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var winningPercentageData;\n\n      if (this.props.sessions) {\n        winningPercentageData = this.winLossPercentage();\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(OverTime, {\n        labels: this.createOverTimeLabels(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }), React.createElement(WinningPercentage, {\n        data: winningPercentageData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Dashboard;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    username: state.user.username,\n    first_name: state.user.first_name,\n    last_name: state.user.last_name,\n    sessions: state.user.sessions\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchingUserData: fetchingUserData\n})(Dashboard);","map":{"version":3,"sources":["/Users/flatironschool/Development/module_5/poker_app_frontend/src/react/homepage/dashboard.js"],"names":["React","Component","connect","fetchingUserData","WinningPercentage","OverTime","Dashboard","winLossPercentage","winCount","lossCount","i","props","sessions","length","amount","winningPercentageData","createOverTimeLabels","moment","require","overTimeLabels","last30DayArray","day","subtract","format","push","last12WeekArray","week","last12MonthArray","month","mapStateToProps","state","username","user","first_name","last_name"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport './dashboard.css';\n\nimport { fetchingUserData } from '../../redux/actions/users.js'\nimport WinningPercentage from './winningpercentage'\nimport OverTime from './overtime'\n\nclass Dashboard extends Component {\n  componentDidMount() {\n    this.props.fetchingUserData()\n  }\n\n\n  // RETURNS AN ARRAY OF WINNING SESSION COUNT AND LOSING SESSIONS COUNT\n  winLossPercentage = () => {\n    let winCount = 0\n    let lossCount = 0\n    for (let i = 0; i < this.props.sessions.length; i++) {\n      if (this.props.sessions[i].amount > 0) {\n        winCount++\n      } else {\n        lossCount++\n      }\n    }\n    let winningPercentageData = [winCount, lossCount]\n    return winningPercentageData\n  }\n\n  // RETURNS AN OBJECT W/ ARRAYS OF THE LAST 30, 90, AND 365 DAYS\n  createOverTimeLabels = () => {\n    let moment = require('moment')\n    let overTimeLabels = {}\n\n    let last30DayArray = []\n\n    for (let i = 0; i < 30; i++) {\n      let day = moment().subtract(i, 'days').format('l')\n      last30DayArray.push(day)\n    }\n\n    let last12WeekArray = []\n\n    for (let i = 0; i < 12; i++) {\n      let week = moment().subtract(i, 'weeks').format('l')\n      last12WeekArray.push(week)\n    }\n\n    let last12MonthArray = []\n\n    for (let i = 0; i < 12; i++) {\n      let month = moment().subtract(i, 'months').format('l')\n      last12MonthArray.push(month)\n    }\n\n    overTimeLabels = {\n      '30days': last30DayArray,\n      '12weeks': last12WeekArray,\n      '12months': last12MonthArray\n    }\n\n    return overTimeLabels\n  }\n\n  render() {\n    let winningPercentageData;\n    if (this.props.sessions) {\n      winningPercentageData = this.winLossPercentage()\n    }\n\n    return (\n      <div>\n        <OverTime labels={this.createOverTimeLabels()}/>\n        <WinningPercentage data={winningPercentageData}/>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    username: state.user.username,\n    first_name: state.user.first_name,\n    last_name: state.user.last_name,\n    sessions: state.user.sessions\n  }\n}\n\nexport default connect(mapStateToProps, { fetchingUserData })(Dashboard);\n"]},"metadata":{},"sourceType":"module"}