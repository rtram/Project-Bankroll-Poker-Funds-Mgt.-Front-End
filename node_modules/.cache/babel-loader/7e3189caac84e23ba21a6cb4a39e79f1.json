{"ast":null,"code":"import _toConsumableArray from \"/Users/flatironschool/Development/module_5/poker_app_frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/flatironschool/Development/module_5/poker_app_frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/flatironschool/Development/module_5/poker_app_frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/flatironschool/Development/module_5/poker_app_frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/flatironschool/Development/module_5/poker_app_frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/flatironschool/Development/module_5/poker_app_frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/flatironschool/Development/module_5/poker_app_frontend/src/react/transfer/transfercontainer/Transfer.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Container, Divider, Header, Icon, Button } from 'semantic-ui-react';\nimport { postingLike, deletingLike } from '../../../redux/actions/like';\n\nvar Transfer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Transfer, _Component);\n\n  function Transfer() {\n    var _this;\n\n    _classCallCheck(this, Transfer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Transfer).call(this));\n\n    _this.fullNameConverter = function (object, type) {\n      return object[type].first_name + ' ' + object[type].last_name;\n    };\n\n    _this.handleClick = function () {\n      var currentUserId = parseInt(localStorage.getItem('currentUser'));\n      var userIdArray;\n\n      if (_this.state.likes.length > 0) {\n        userIdArray = _this.state.likes.map(function (transferObject) {\n          return transferObject.user_id;\n        });\n      }\n\n      if (userIdArray > 0 && userIdArray.includes(currentUserId)) {\n        var index = userIdArray.indexOf(currentUserId);\n        var originalLike = _this.state.likes[index];\n\n        if ('id' in originalLike) {\n          _this.props.deletingLike(originalLike);\n        }\n\n        var copyState = _this.state.likes.slice();\n\n        copyState.splice(index, 1);\n\n        _this.setState({\n          likes: copyState,\n          likeCount: _this.state.likeCount - 1\n        });\n      } else {\n        var likeObject = {\n          transaction_id: _this.props.transfer.id,\n          user_id: currentUserId\n        };\n\n        _this.props.postingLike(likeObject);\n\n        var _copyState = _this.state.likes;\n        debugger;\n\n        if (_copyState.length === 0) {\n          _copyState = _toConsumableArray(likeObject);\n        } else {\n          _copyState = _copyState.push(likeObject);\n        }\n\n        _this.setState({\n          likes: updatedState,\n          likeCount: _this.state.likeCount + 1\n        });\n      }\n    };\n\n    _this.state = {\n      likes: [],\n      likeCount: 0\n    };\n    return _this;\n  }\n\n  _createClass(Transfer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var likeArray = this.props.transfer.likes;\n      this.setState({\n        likes: likeArray,\n        likeCount: likeArray.length\n      });\n    } // RETURNS OBJECT SENDER/RECIPIENT'S FULL NAME STRING\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(Header, {\n        as: \"h4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, this.fullNameConverter(this.props.transfer, 'sender'), \" paid \", this.fullNameConverter(this.props.transfer, 'recipient'), \" $\", this.props.transfer.amount, \" on \", this.props.transfer.date), React.createElement(Button, {\n        color: \"blue\",\n        onClick: this.handleClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        name: \"like\",\n        color: \"red\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }), this.state.likeCount), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, this.props.transfer.message), React.createElement(Divider, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Transfer;\n}(Component);\n\nexport default connect(null, {\n  postingLike: postingLike,\n  deletingLike: deletingLike\n})(Transfer);","map":{"version":3,"sources":["/Users/flatironschool/Development/module_5/poker_app_frontend/src/react/transfer/transfercontainer/Transfer.js"],"names":["React","Component","connect","Container","Divider","Header","Icon","Button","postingLike","deletingLike","Transfer","fullNameConverter","object","type","first_name","last_name","handleClick","currentUserId","parseInt","localStorage","getItem","userIdArray","state","likes","length","map","transferObject","user_id","includes","index","indexOf","originalLike","props","copyState","slice","splice","setState","likeCount","likeObject","transaction_id","transfer","id","push","updatedState","likeArray","amount","date","message"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Container, Divider, Header, Icon, Button } from 'semantic-ui-react'\nimport { postingLike, deletingLike } from '../../../redux/actions/like'\n\n\n\nclass Transfer extends Component {\n  constructor() {\n    super()\n    this.state={\n      likes:[],\n      likeCount: 0\n    }\n  }\n\n  componentDidMount() {\n    let likeArray = this.props.transfer.likes\n\n    this.setState({\n      likes: likeArray,\n      likeCount: likeArray.length\n    })\n  }\n\n  // RETURNS OBJECT SENDER/RECIPIENT'S FULL NAME STRING\n  fullNameConverter = (object, type) => {\n    return object[type].first_name + ' ' + object[type].last_name\n  }\n\n  handleClick = () => {\n    let currentUserId = parseInt(localStorage.getItem('currentUser'))\n    let userIdArray;\n\n    if (this.state.likes.length > 0) {\n      userIdArray = this.state.likes.map(transferObject => transferObject.user_id)\n    }\n\n    if (userIdArray > 0 && userIdArray.includes(currentUserId)) {\n      let index = userIdArray.indexOf(currentUserId)\n      let originalLike = this.state.likes[index]\n\n      if ('id' in originalLike) {\n        this.props.deletingLike(originalLike)\n      }\n      let copyState = this.state.likes.slice()\n      copyState.splice(index, 1)\n      this.setState({\n        likes: copyState,\n        likeCount: this.state.likeCount - 1,\n      })\n    } else {\n      let likeObject = {\n        transaction_id: this.props.transfer.id,\n        user_id: currentUserId,\n      }\n      this.props.postingLike(likeObject)\n      let copyState = this.state.likes\n      debugger\n      if (copyState.length === 0 ) {\n        copyState = [...likeObject]\n      } else {\n        copyState = copyState.push(likeObject)\n      }\n      this.setState({\n        likes: updatedState,\n        likeCount: this.state.likeCount + 1,\n      })\n    }\n  }\n\n  render() {\n    return(\n      <Container>\n        <Header as='h4'>{this.fullNameConverter(this.props.transfer, 'sender')} paid {this.fullNameConverter(this.props.transfer, 'recipient')} ${this.props.transfer.amount} on {this.props.transfer.date}</Header>\n        <Button color='blue' onClick={this.handleClick}>\n          <Icon name='like' color='red'/>\n          {this.state.likeCount}\n        </Button>\n        <p>{this.props.transfer.message}</p>\n        <Divider />\n      </Container>\n    )\n  }\n}\n\n\n\nexport default connect(null, { postingLike, deletingLike })(Transfer)\n"]},"metadata":{},"sourceType":"module"}