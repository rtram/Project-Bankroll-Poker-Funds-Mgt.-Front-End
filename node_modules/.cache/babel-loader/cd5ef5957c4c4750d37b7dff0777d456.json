{"ast":null,"code":"import _toConsumableArray from \"/Users/flatironschool/Development/module_5/poker_app_frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/flatironschool/Development/module_5/poker_app_frontend/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { combineReducers } from 'redux';\n\nvar userReducer = function userReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'FETCHED_USER_DATA':\n      return _objectSpread({}, session, {\n        user: action.data\n      });\n\n    case 'POST_SESSION':\n      return _objectSpread({}, state, {\n        sessions: [].concat(_toConsumableArray(state.sessions), [action.payload])\n      });\n\n    case 'UPDATED_SESSION':\n      var originalSession = state.sessions.find(function (session) {\n        return session.id === action.payload.id;\n      });\n      var index = state.sessions.indexOf(originalSession);\n\n      var sessionCopy = _toConsumableArray(state.sessions);\n\n      sessionCopy.splice(index, 1, action.payload);\n      return _objectSpread({}, state, {\n        sessions: _toConsumableArray(sessionCopy)\n      });\n\n    case 'DELETED_SESSION':\n      originalSession = state.sessions.find(function (session) {\n        return session.id === action.payload.id;\n      });\n      index = state.sessions.indexOf(originalSession);\n      sessionCopy = _toConsumableArray(state.sessions);\n      sessionCopy.splice(index, 1);\n      return _objectSpread({}, state, {\n        sessions: _toConsumableArray(sessionCopy)\n      });\n\n    case 'UPDATED_USER_BALANCE':\n      return _objectSpread({}, state, {\n        balance: action.payload.balance\n      });\n\n    case 'FETCHED_USER_LIST':\n      return _objectSpread({}, state, {\n        userList: action.payload\n      });\n\n    default:\n      return state;\n  }\n};\n\nvar rootReducer = combineReducers({\n  user: userReducer\n});\nexport default rootReducer;","map":{"version":3,"sources":["/Users/flatironschool/Development/module_5/poker_app_frontend/src/redux/reducers/index.js"],"names":["combineReducers","userReducer","state","action","type","session","user","data","sessions","payload","originalSession","find","id","index","indexOf","sessionCopy","splice","balance","userList","rootReducer"],"mappings":";;AAAA,SAASA,eAAT,QAAgC,OAAhC;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAwB;AAAA,MAAvBC,KAAuB,uEAAf,EAAe;AAAA,MAAXC,MAAW;;AAC1C,UAAOA,MAAM,CAACC,IAAd;AACE,SAAK,mBAAL;AACE,+BAAWC,OAAX;AAAoBC,QAAAA,IAAI,EAAEH,MAAM,CAACI;AAAjC;;AACF,SAAK,cAAL;AACE,+BAAWL,KAAX;AAAkBM,QAAAA,QAAQ,+BAAKN,KAAK,CAACM,QAAX,IAAqBL,MAAM,CAACM,OAA5B;AAA1B;;AACF,SAAK,iBAAL;AACE,UAAIC,eAAe,GAAGR,KAAK,CAACM,QAAN,CAAeG,IAAf,CAAoB,UAAAN,OAAO;AAAA,eAAIA,OAAO,CAACO,EAAR,KAAeT,MAAM,CAACM,OAAP,CAAeG,EAAlC;AAAA,OAA3B,CAAtB;AACA,UAAIC,KAAK,GAAGX,KAAK,CAACM,QAAN,CAAeM,OAAf,CAAuBJ,eAAvB,CAAZ;;AACA,UAAIK,WAAW,sBAAOb,KAAK,CAACM,QAAb,CAAf;;AACAO,MAAAA,WAAW,CAACC,MAAZ,CAAmBH,KAAnB,EAA0B,CAA1B,EAA6BV,MAAM,CAACM,OAApC;AACA,+BAAWP,KAAX;AAAkBM,QAAAA,QAAQ,qBAAKO,WAAL;AAA1B;;AACF,SAAK,iBAAL;AACEL,MAAAA,eAAe,GAAGR,KAAK,CAACM,QAAN,CAAeG,IAAf,CAAoB,UAAAN,OAAO;AAAA,eAAIA,OAAO,CAACO,EAAR,KAAeT,MAAM,CAACM,OAAP,CAAeG,EAAlC;AAAA,OAA3B,CAAlB;AACAC,MAAAA,KAAK,GAAGX,KAAK,CAACM,QAAN,CAAeM,OAAf,CAAuBJ,eAAvB,CAAR;AACAK,MAAAA,WAAW,sBAAOb,KAAK,CAACM,QAAb,CAAX;AACAO,MAAAA,WAAW,CAACC,MAAZ,CAAmBH,KAAnB,EAA0B,CAA1B;AACA,+BAAWX,KAAX;AAAkBM,QAAAA,QAAQ,qBAAKO,WAAL;AAA1B;;AACF,SAAK,sBAAL;AACE,+BAAWb,KAAX;AAAkBe,QAAAA,OAAO,EAAEd,MAAM,CAACM,OAAP,CAAeQ;AAA1C;;AACF,SAAK,mBAAL;AACE,+BAAWf,KAAX;AAAkBgB,QAAAA,QAAQ,EAAEf,MAAM,CAACM;AAAnC;;AACF;AACE,aAAOP,KAAP;AAtBJ;AAwBD,CAzBD;;AA2BA,IAAMiB,WAAW,GAAGnB,eAAe,CAAC;AAClCM,EAAAA,IAAI,EAAEL;AAD4B,CAAD,CAAnC;AAIA,eAAekB,WAAf","sourcesContent":["import { combineReducers } from 'redux'\n\nconst userReducer = (state = [], action) => {\n  switch(action.type) {\n    case 'FETCHED_USER_DATA':\n      return {...session, user: action.data}\n    case 'POST_SESSION':\n      return {...state, sessions:[...state.sessions, action.payload]}\n    case 'UPDATED_SESSION':\n      let originalSession = state.sessions.find(session => session.id === action.payload.id)\n      let index = state.sessions.indexOf(originalSession)\n      let sessionCopy = [...state.sessions]\n      sessionCopy.splice(index, 1, action.payload)\n      return {...state, sessions:[...sessionCopy]}\n    case 'DELETED_SESSION':\n      originalSession = state.sessions.find(session => session.id === action.payload.id)\n      index = state.sessions.indexOf(originalSession)\n      sessionCopy = [...state.sessions]\n      sessionCopy.splice(index, 1)\n      return {...state, sessions:[...sessionCopy]}\n    case 'UPDATED_USER_BALANCE':\n      return {...state, balance: action.payload.balance}\n    case 'FETCHED_USER_LIST':\n      return {...state, userList: action.payload}\n    default:\n      return state\n  }\n}\n\nconst rootReducer = combineReducers({\n  user: userReducer,\n});\n\nexport default rootReducer;\n"]},"metadata":{},"sourceType":"module"}